{
  "hash": "3e42a65c76be990d1ee2552ed1ae1ef0",
  "result": {
    "markdown": "# Introduction to Matrices and rasters\n\nIn this chapter, our main objectives are to delve into the realm of spatial data analysis by working with raster data. We will introduce you to various packages beyond \"base R\" that are specifically designed for handling spatial data. We will also explore the fundamental data structures for spatial data analysis, including `matrix` and `array`, as well as their spatial counterparts, namely the `stars` class for single-band rasters and multi-band rasters.\n\nThroughout this chapter, we will learn how to access and manipulate cell values and other properties of rasters. Additionally, we will gain insights into reading and writing raster data, which are essential skills for working with spatial data.\n\nTo achieve these aims, we will be utilizing the following R packages:\n\n-   `terra`: This package provides a versatile and efficient framework for working with spatial data, including raster data. It offers a wide range of functionalities for data manipulation, analysis, and visualization.\n\n-   `tidyterra`: An extension of the `tidyverse` ecosystem, `tidyterra` complements the `terra` package by providing a set of tidyverse-style functions and workflows for working with spatial data in a tidy and consistent manner.\n\n-   `raster`: The `raster` package is a well-established package for handling raster data in R. It offers a comprehensive set of functions for reading, writing, processing, and analyzing raster datasets.\n\n-   `sf`: The `sf` package is focused on handling vector data, providing classes and functions for working with spatial geometries. However, it also includes support for working with raster data, making it a valuable package for spatial data analysis.\n\nBy mastering these packages and their functionalities, you will gain the skills and tools necessary to explore, analyze, and visualize spatial data effectively.\n\n\n\n## Matrices\n\nMatrices are a fundamental data structure in R that allows you to store and manipulate data in a two-dimensional format. They consist of rows and columns, where each element is identified by its row and column index. Matrices are useful for organizing and working with structured data, such as numerical or categorical values.\n\nMatrices are useful for performing various mathematical operations, such as matrix multiplication, addition, and transposition. They are also commonly used in statistical analysis and data manipulation tasks. R provides many built-in functions and operators for working with matrices, allowing you to perform calculations, subsetting, and other operations efficiently.\n\n## What is a `matrix`?\n\nA matrix is a two-dimensional data structure in R that consists of rows and columns. It is similar to a table or a spreadsheet where each element in the matrix is identified by its row and column index. Matrices in R can contain elements of the same data type, such as numeric values, character strings, or logical values.\n\nUnlike a `data.frame`, the number of values in all columns of a matrix is equal, and the same can be said about the rows. It is important to know how to work with matrices because it is a commonly used data structure, with many uses in data processing and analysis, including spatial data. For example, many R function accept a `matrix` as an argument, or return a `matrix` as a returned object. Moreover, a `matrix` is used to store raster object.\n\n## Creating a `matrix`\nIn R, you can create a matrix using the `matrix()` function. The function takes in a vector of values and parameters specifying the number of rows and columns. A `matrix` function accepts the following arguments:\n\n-   `data`---A vector of the *values* to fill into the matrix\n-   `nrow`---The number of *rows*\n-   `ncol`---The number of *columns*\n-   `byrow`---Whether the matrix is filled *by column* (`FALSE`, the default) or *by row* (`TRUE`)\n\nFor example, to create a 3x3 matrix with numeric values, you can use the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_matrix <- matrix(\n  c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n  nrow = 3, \n  ncol = 3\n  )\n```\n:::\n\n\nThis will create a matrix `my_matrix` with 3 rows and 3 columns, where the elements are filled in column-wise order.\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n:::\n\n\nNote that the class of `matrix` objects is a vector of length two, with the values `\"matrix\"` and `\"array\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_matrix |>\n  class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"matrix\" \"array\" \n```\n:::\n:::\n\n\n\nThis implies the fact that the `matrix` class *inherits* from the more general `array` class. The `nrow` and `ncol` parameters determine the number of rows and number of columns, respectively. When only one of them is specified, the other is automatically determined based on the length of the `data` vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy_matrix <- matrix(\n  c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n  ncol = 3\n  )\n\nmy_matrix\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n:::\n\n\n::: {#exm-rep}\n\nWhat do you think will happen when we try to create a matrix with less, or more, `data` values than matrix size `nrow*ncol`? Run the following expressions to find out.\n:::\n\n\n\n::: {.solution}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(12:1, ncol = 4, nrow = 4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]   12    8    4   12\n[2,]   11    7    3   11\n[3,]   10    6    2   10\n[4,]    9    5    1    9\n```\n:::\n:::\n\n\n:::\n\n\n::: {#exm-rep}\n\nCreate a 3×33×3 matrix where all values are 1/91/9.\n:::\n\n\nFinally, the `byrow` parameter determines the direction of filling the matrix with `data` values. In both cases the filling starts from the top-left corner (i.e., row 1, column 1), however with `byrow=FALSE` the matrix is filled one *column* at a time (the default), while with `byrow=TRUE` the matrix is filled one row at a time. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix(1:12, nrow = 3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4]\n[1,]    1    4    7   10\n[2,]    2    5    8   11\n[3,]    3    6    9   12\n```\n:::\n:::\n\n\n\n## `matrix` properties\n\nIn R, a matrix is a two-dimensional data structure that contains elements of the same data type organized in rows and columns. Matrices are useful for various mathematical and statistical operations.\n\n### Dimensions\n\nA matrix has a defined number of rows and columns, which determine its dimensions. The dimensions of a matrix can be obtained using the dim() function. \n\n::: {.cell}\n\n```{.r .cell-code}\nx = matrix(1:6, nrow = 2) \nx \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n:::\n\nFor example, if mat is a matrix, dim(mat) will return a vector containing the number of rows and columns.\n\n::: {.cell}\n\n```{.r .cell-code}\nx |>\n  dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n:::\n\n\nThe `length` function returns the number of values in a `matrix`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx |>\n  length()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\n\nJust like with a `data.frame`, the `nrow` and `ncol` functions return the number of rows and columns in a `matrix`, respectively:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx |>\n  ncol()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nAlso like with a `data.frame`, the `dim` function gives both *dimensions* of the `matrix` as a vector of length 2, i.e., number of rows and columns, respectively:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx |>\n  dim()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 3\n```\n:::\n:::\n\n\nFor example, R has a built-in dataset named `volcano`, which is a `matrix` of surface elevation. The sample script `volcano.R`, used in Section [2.1.1](https://geobgu.xyz/r-2021/vectors.html#using-code-files) to demontrate working with R code files, creates a 3D image of elevation based on that matrix (Figure [2.2](https://geobgu.xyz/r-2021/vectors.html#fig:image-volcano-3d)).\n\n\n::: {#exm-rep}\nFind out what are the number of elements, rows and columns in the built-in `matrix` named `volcano`.\n:::\n\n### Row and column names\n\nLike a `data.frame`, `matrix` objects also have row and column names which can be accessed or modified using the `rownames` and `colnames` functions, respectively. Unlike `data.frame` row and column names, which are mandatory, `matrix` row and column names are optional. For example, matrices created with `matrix` initially do not have row and column names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNULL\n```\n:::\n:::\n\n\nThe `matrix` row and column names can be initialized, or modified, by assignment to the `rownames` and `colnames` properties:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrownames(x) = c(\"a\", \"b\") \ncolnames(x) = c(\"var1\", \"var2\", \"var3\") \nx \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  var1 var2 var3\na    1    3    5\nb    2    4    6\n```\n:::\n:::\n\n\n### `matrix` conversions\nIn R, you can convert between different data structures, such as vectors, data frames, and matrices, using various functions and operations. Here are some common ways to convert data into matrices:\n\n\n### `matrix` → vector\nIn R, you can convert a matrix into a vector using the as.vector() or c() function. Here's how you can perform the conversion:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = matrix(\n  data = 1:6, \n  ncol = 3, \n  byrow = TRUE)\nx \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nx |> \n  as.vector()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 4 2 5 3 6\n```\n:::\n:::\n\n::: callout-important\nNote that the `matrix` values are always arranged *by column* in the resulting vector!\n:::\n\n\n::: {#exm-rep}\nDoes the `volcano` matrix contain any `NA` values? How can we check?\n:::\n\n\n### `matrix` → `data.frame`\nTo convert a matrix into a data frame in R, you can use the as.data.frame() function. Here's how you can perform the conversion:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx |>\n  as.data.frame() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 V3\n1  1  2  3\n2  4  5  6\n```\n:::\n:::\n\n\n::: callout-note\nNote that row and column names are automatically generated (if they do not exist) as part of the conversion, since they are mandatory in a `data.frame`\n:::\n\n\n### Transposing a matrix\n\nIn R, you can transpose a matrix by interchanging its rows and columns. The transpose operation flips the matrix along its diagonal. R provides the `t()` function specifically designed for transposing matrices. The `t` function **transposes** a `matrix`. In other words, the matrix rows and columns are \\\"switched\\\"---rows become columns and columns become rows. Here's how you can transpose a matrix in R:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx = matrix(1:6, ncol = 3) \nx \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nt(x) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2]\n[1,]    1    2\n[2,]    3    4\n[3,]    5    6\n```\n:::\n:::\n\n\n\n::: {#exm-rep}\nWhat will be the result of `t(t(x))`?\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\nrequire(terra)\nrequire(tidyterra)\nrequire(patchwork)\n```\n:::\n\n\n## What is a raster?\n\nA raster is basically a matrix or an array, representing a rectangular area on the surface of the earth. To associate the matrix or the array with the particular area it represents, the raster has some additional *spatial* properties, on top of the *non-spatial* properties that any ordinary matrix or array has:\n\n-   **Non-spatial** properties\n    -   Values\n    -   Dimensions (rows, columns, layers)\n\n-   **Spatial** properties\n\n    -   Extent\n    -   Coordinate Reference System (CRS)\n    -   (Resolution)\n\nRaster **extent** is the range of x- and y-axis coordinates that the raster occupies. The **Coordinate Reference System (CRS)** is the particular system that \\\"associates\\\" the raster coordinates (which are just pairs of x/y values) to geographic locations. Raster **resolution** is the size of a raster cell, in the x and y directions. The resolution is listed in parentheses because it can be calculated given the extent and the number of rows and columns. \n\n## Commmon Raster file formats\n\nCommonly used raster file formats (Table [5.2] can be divided in two groups. \\\"Simple\\\" raster file formats, such as **GeoTIFF**, are single-band or multi-band rasters (Figure [5.10] with a geo-referenced extent, as discussed above (Section [5.3.1]. \\\"Complex\\\" raster file formats, such as **HDF**, contain additional complexity, such as more than three dimensions (Figure [5.11], and/or metadata, such as band names, time stamps, units of measurement, and so on.\n|                                    |                                                                 |                                       |\n|------------------------------------|-----------------------------------------------------------------|---------------------------------------|\n|                                    |                                                                 | Table 5.2: Common raster file formats |\n| **Type**                           | **Format**                                                      | **File extension**                    |\n| \\\"Simple\\\"                         | [GeoTIFF](https://en.wikipedia.org/wiki/GeoTIFF)                | `.tif`                                |\n|                                    | [Erdas Imagine Image](https://gdal.org/drivers/raster/hfa.html) | `.img`                                |\n| \\\"Complex\\\" (\\>3D and/or metadata) | [HDF](https://en.wikipedia.org/wiki/Hierarchical_Data_Format)   | `.hdf`, `he5`, and other              |\n|                                    | [NetCDF](https://en.wikipedia.org/wiki/NetCDF)                  | `.nc`                                 |\n\n## Raster with terra\n\nIn this section, our focus will be on the terra package, which serves as a replacement for the raster package in R when working with raster-based geospatial data. Over the years, the raster package has been widely used as a primary tool for geospatial data manipulation in R. However, the creators of the raster package have recently introduced the terra package as a more efficient alternative.\n\n*terra* is a geospatial data processing library in R that provides efficient and scalable tools for working with raster data. It is designed to handle large and complex spatial datasets, allowing for high-performance analysis and processing. The terra package introduces three new classes for working with geospatial data:\n\n1. **SpatRaster**: The SpatRaster class is designed for representing raster data in a geospatial context. It provides efficient memory usage compared to the data models used in the raster package. SpatRaster objects store the spatial extent, resolution, and values of a raster dataset. They support various operations and functions for raster data manipulation, analysis, and visualization.\n\n2. **SpatVector**: The SpatVector class represents vector-based geospatial data, including points, lines, and polygons, along with their associated attributes. SpatVector objects store the geometries and attribute data of vector features. They support common vector operations such as subsetting, spatial queries, spatial joins, and attribute manipulation.\n\n3. **SpatExtent**: The SpatExtent class is used to represent the spatial extent of a geospatial object, such as a SpatRaster or SpatVector. It captures the minimum and maximum coordinates along each dimension (e.g., x, y, and potentially z for 3D data). SpatExtent objects provide methods for comparing extents, calculating overlaps, and extracting subsets of data based on spatial extent.\n\nTo get started using the terra package for working with geospatial data and performing various tasks, such as raster preprocessing, install the terra package from the CRAN repository using the following command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"terra\")\n```\n:::\n\n\n\nThen, load the package into your R session:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(terra)\n```\n:::\n\n\nTo read a raster dataset from an existing file, you can use the `rast()` function along with the file path and name. For instance, you can read bathymetry data covering the Indian Ocean region from a file provided by NASA.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy = rast(\"data/wioregio-7753.asc\")\n\nbathy\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatRaster \ndimensions  : 3181, 2641, 1  (nrow, ncol, nlyr)\nresolution  : 0.01666667, 0.01666667  (x, y)\nextent      : 25.99167, 70.00834, -40.00833, 13.00834  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 \nsource      : wioregio-7753.asc \nname        : wioregio-7753 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy  |>\n  class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"SpatRaster\"\nattr(,\"package\")\n[1] \"terra\"\n```\n:::\n:::\n\n\nThe `spatRaster` object in R provides a range of functions to obtain information about the data it contains. Simply calling the object using its variable name will return basic information, but additional functions are available for more specific details. For instance, `ncol()` returns the number of columns, `nrow()` returns the number of rows, and `ncell()` returns the total number of cells in the data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy |>\n  ncol()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2641\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy |>\n  nrow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3181\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy |>\n  nlyr()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy |>\n  res()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.01666667 0.01666667\n```\n:::\n:::\n\nThe `nlyr()` function returns the number of layers or bands, while `res()` provides the data's resolution relative to the map projection's units. The names assigned to each band can be obtained using the `names()` function. Finally, `inMemory()` returns a Boolean value indicating whether the data is stored in memory or RAM. These functions allow for a more detailed understanding of the spatRaster object's contents and properties.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy |>\n  ncell()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 8401021\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy |>\n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"wioregio-7753\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy |>\n  inMemory()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\n\n## Raster Preprocessing\n\nIn the next section, we will delve into raster preprocessing tasks such as cropping, masking, and merging using the terra package. These operations allow us to manipulate raster data before further analysis. To illustrate these concepts, I will use an example of reading a bathymetry model specific to the Western Indian Ocean (WIO) region.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy %>% \n  sf::st_bbox()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     xmin      ymin      xmax      ymax \n 25.99167 -40.00833  70.00834  13.00834 \n```\n:::\n:::\n\n\n\nThe command `bathy %>% sf::st_bbox()` is used for obtaining the bounding box of the Western Indian Ocean (WIO) region in the bathymetry data. This command utilizes the `st_bbox()` function from the `sf` package in R programming language. The output of this command will provide the minimum and maximum values for longitude and latitude that define the rectangular boundary of the WIO region. This information can be useful for a variety of spatial analyses, such as selecting a subset of data within the WIO region or visualizing the extent of the region on a map. Overall, this command provides a convenient and efficient way to obtain the bounding box for the WIO region from the bathymetry data.\n\nTo extract a rectangular extent from a larger raster dataset, you can utilize the `crop()` function in the terra package. This requires specifying the desired extent using the `spatExtent` object, which is created using the `ext()` function and defining the xmin, xmax, ymin, and ymax coordinates relative to the map projection. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncrop_extent <- terra::ext(30,65,-30,10)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy.aoi = bathy %>% \n  terra::crop(crop_extent)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbathy.aoi %>% \n  sf::st_bbox()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      xmin       ymin       xmax       ymax \n 29.991667 -30.008331  64.991674   9.991677 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  tidyterra::geom_spatraster(data = bathy.aoi)+\n  tidyterra::scale_fill_hypso_tint_c(\n    palette = \"gmt_globe\",\n    labels = scales::label_number(),\n    breaks = seq(-6000, 6000,3000), \n    # limits = c(-6000, 6500),\n    guide = guide_colorbar(\n      direction = \"horizontal\",\n      title = \"Bathymetry & altitude (meters)\",\n      title.position = \"top\",\n      barwidth = 12, barheight = 0.8\n    ))+\n  coord_sf(expand = FALSE) +\n  theme_bw(base_size = 14) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![Bathymetry and altitude in the WIO region](ch5_files/figure-html/fig-bath-1.png){#fig-bath width=576}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\niron.wio = terra::rast(\"f:/2023/dataAll/wekeza/Present.Benthic.Max.Depth.Iron.Range.tif\") |>\n  terra::crop(terra::ext(25,70,-40,15)) %>% \n  tidyterra::rename(iron = 1)\n\n\niron.wio %>% \n  terra::values()  %>%\n  quantile(na.rm = T, c(0.05,0.95))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     5%     95% \n1.3e-05 6.8e-05 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  tidyterra::geom_spatraster(data = iron.wio)+\n  scale_fill_gradientn(colours = hcl.colors(n = 120, palette = \"Spectral\", rev = TRUE),\n    guide = guide_colorbar(\n      direction = \"horizontal\",\n      title = \"Iron distribution\",\n      title.position = \"top\",\n      barwidth = 12, barheight = 0.8\n    ), \n                       limits = c(0.000013, 0.000068), na.value = \"white\", \n                       breaks = seq(0.000013, 0.000068, length.out = 5), label = seq(0.13,0.6,0.1))+\n  theme_bw(base_size = 14)+\n  coord_sf(expand = FALSE)+\n  theme_bw(base_size = 14) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![Iron distribution in the WIO region](ch5_files/figure-html/fig-iron-1.png){#fig-iron width=576}\n:::\n:::\n\n\n\nAdditionally, you can crop a raster relative to the rectangular extent or bounding box of another geospatial layer by using the extent of that layer in the crop operation. In the provided code block, an example is shown where the spatial extent of a watershed boundary is used for cropping. It is worth noting that plotting `spatVector` objects with the `tmap` package may not be possible, so the data is also read in as an `sf` object using the `sf` package for visualization purposes.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  tidyterra::geom_spatraster(data = bathy.aoi)+\n  tidyterra::geom_spatraster_contour(data = bathy.aoi, breaks = -200)+\n  tidyterra::scale_fill_hypso_tint_c(\n    palette = \"gmt_globe\",\n    labels = scales::label_number(),\n    breaks = seq(-6000, 6000,3000), \n    # limits = c(-6000, 6500),\n    guide = guide_colorbar(\n      direction = \"horizontal\",\n      title = \"Bathymetry & altitude (meters)\",\n      title.position = \"top\",\n      barwidth = 12, barheight = 0.8\n    ))+\n  coord_sf(expand = FALSE) +\n  theme_bw(base_size = 14) +\n  theme(legend.position = \"top\")\n```\n\n::: {.cell-output-display}\n![Bathymetry and altitude in the WIO region superimposed with isobar](ch5_files/figure-html/fig-bath-cont-1.png){#fig-bath-cont width=576}\n:::\n:::\n",
    "supporting": [
      "ch5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}