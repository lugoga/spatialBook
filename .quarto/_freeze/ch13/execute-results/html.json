{
  "hash": "bc799e0f95f8611b2aa9ddf923d65a11",
  "result": {
    "markdown": "# High Frequency Data\n\n## Introduction\n\nHigh-frequency ocean data for temperature, pH, and dissolved oxygen can be obtained through the use of oceanographic sondes. Sondes are instruments that are deployed in the ocean to collect continuous measurements of various parameters. When combined, temperature, pH, and dissolved oxygen data collected can provide valuable insights into oceanic conditions and help researchers study processes such as ocean warming, ocean acidification, and oxygen dynamics.\n\nIn this chapter, we will delve into the intricacies of processing and visualizing high frequency data. Our dataset has been sourced from the Pemba Channel, specifically in the vicinity of upwelling events. Our aim is to impart knowledge on the techniques required to analyze and interpret this data effectively. We will adopt a formal approach throughout this chapter to ensure that our readers gain a comprehensive understanding of the subject matter.\n\n## Packages needed\n\nLet's read the functions in the working directory.The `require()` function is used to load R packages into the current R session. When the `require(tidyverse)` code is executed, it checks if the tidyverse package is already installed. If it is not installed, it installs the package and then loads it into the session. If the package is already installed, it simply loads it.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrequire(tidyverse)\nrequire(patchwork)\n```\n:::\n\n\nThen we define our color codes that we are going to use\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmy.colors = colorRampPalette(c(\"#5E85B8\",\"#EDF0C0\",\"#C13127\"))\n\n\nmy.colors2 = colorRampPalette(colors = c(\"#8220EF\", \"#000096\", \"#0000CC\", \"#446CEA\", \"#1F90FF\", \"#00BFFA\",\n                            \"#9FD2FE\", \"#D3F5FF\", \"#FFFFC7\", \"#FFAA01\", \"#FF6E01\", \"#FE0000\", \"#C80000\", \"#9F2323\"))\n```\n:::\n\n\n\n\n## Dataset\nWe are going to use `moa_high_frequency.csv`, which is a high frequency dataset. This dataset has three columns and a brief description of each column:\n\n1. `date`: This column appears to contain date and time values represented as `dttm` (DateTime) data type. It includes specific timestamps such as \"2022-10-08 22:00:00\" and \"2022-10-08 22:30:00\".\n\n2. `variables`: This column is of character (`chr`) data type represents variable measured, which are Temperature, pH and dissolved oxygen.\n\n3. `data`: This column is of numeric (`dbl`) data type and contains the actual data values corresponding to the measurements of Temperature, pH and dissolved oxygen.\n\nAs the data is in a comma-separated file format, we can easily import it into the session from the working directory by using the `read_csv` function from the `readr` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = read_csv(\"data/moa_high_frequency.csv\")\n```\n:::\n\n\n\nThe code `data = read_csv(\"data/moa_high_frequency.csv\")` read and load the high-frequency data from the CSV file into the `data` variable, and you can further analyze and manipulate the data using R's data manipulation and analysis capabilities.\n\nWe can concise have a summary of a dataset, including its structure and contents with `glimpse` function. It is particularly useful for large datasets with many variables.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 25,887\nColumns: 3\n$ date      <dttm> 2022-10-08 22:00:00, 2022-10-08 22:00:00, 2022-10-08 22:30:…\n$ variables <chr> \"temperature\", \"ph\", \"temperature\", \"ph\", \"temperature\", \"ph…\n$ data      <dbl> 26.520000, 8.061103, 26.520000, 8.061375, 26.500000, 8.05981…\n```\n:::\n:::\n\nThis summary provides an overview of the dataset's structure and the information contained within each column. This dataset contains 25,887 rows and 3 columns.  We can use this information to quickly assess the quality and relevance of the dataset for analysis purposes\n\nFurther, we can print the data frame and show the first and last five records of the dataset. The `FSA::headtail()` function is not a built-in function in R. To use the `headtail()` function with the data object, you would need to ensure that the \"FSA\" package is installed and loaded. \n\n\n::: {#tbl-data .cell tbl-cap='The first and last five records of the datase'}\n\n```{.r .cell-code}\ndata |>\n  FSA::headtail() |>\n  gt::gt()\n```\n\n::: {.cell-output-display}\n```{=html}\n<div id=\"zlzenkutcx\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#zlzenkutcx table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#zlzenkutcx thead, #zlzenkutcx tbody, #zlzenkutcx tfoot, #zlzenkutcx tr, #zlzenkutcx td, #zlzenkutcx th {\n  border-style: none;\n}\n\n#zlzenkutcx p {\n  margin: 0;\n  padding: 0;\n}\n\n#zlzenkutcx .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#zlzenkutcx .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#zlzenkutcx .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#zlzenkutcx .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#zlzenkutcx .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#zlzenkutcx .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#zlzenkutcx .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#zlzenkutcx .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#zlzenkutcx .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#zlzenkutcx .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#zlzenkutcx .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#zlzenkutcx .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#zlzenkutcx .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#zlzenkutcx .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#zlzenkutcx .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zlzenkutcx .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#zlzenkutcx .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#zlzenkutcx .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#zlzenkutcx .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zlzenkutcx .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#zlzenkutcx .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zlzenkutcx .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#zlzenkutcx .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zlzenkutcx .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#zlzenkutcx .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#zlzenkutcx .gt_left {\n  text-align: left;\n}\n\n#zlzenkutcx .gt_center {\n  text-align: center;\n}\n\n#zlzenkutcx .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#zlzenkutcx .gt_font_normal {\n  font-weight: normal;\n}\n\n#zlzenkutcx .gt_font_bold {\n  font-weight: bold;\n}\n\n#zlzenkutcx .gt_font_italic {\n  font-style: italic;\n}\n\n#zlzenkutcx .gt_super {\n  font-size: 65%;\n}\n\n#zlzenkutcx .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#zlzenkutcx .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#zlzenkutcx .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#zlzenkutcx .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#zlzenkutcx .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#zlzenkutcx .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#zlzenkutcx .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    \n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"date\">date</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"variables\">variables</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"data\">data</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"date\" class=\"gt_row gt_right\">2022-10-08 22:00:00</td>\n<td headers=\"variables\" class=\"gt_row gt_left\">temperature</td>\n<td headers=\"data\" class=\"gt_row gt_right\">26.520000</td></tr>\n    <tr><td headers=\"date\" class=\"gt_row gt_right\">2022-10-08 22:00:00</td>\n<td headers=\"variables\" class=\"gt_row gt_left\">ph</td>\n<td headers=\"data\" class=\"gt_row gt_right\">8.061103</td></tr>\n    <tr><td headers=\"date\" class=\"gt_row gt_right\">2022-10-08 22:30:00</td>\n<td headers=\"variables\" class=\"gt_row gt_left\">temperature</td>\n<td headers=\"data\" class=\"gt_row gt_right\">26.520000</td></tr>\n    <tr><td headers=\"date\" class=\"gt_row gt_right\">2023-04-06 04:00:00</td>\n<td headers=\"variables\" class=\"gt_row gt_left\">do</td>\n<td headers=\"data\" class=\"gt_row gt_right\">6.970000</td></tr>\n    <tr><td headers=\"date\" class=\"gt_row gt_right\">2023-04-06 04:30:00</td>\n<td headers=\"variables\" class=\"gt_row gt_left\">do</td>\n<td headers=\"data\" class=\"gt_row gt_right\">6.830000</td></tr>\n    <tr><td headers=\"date\" class=\"gt_row gt_right\">2023-04-06 05:00:00</td>\n<td headers=\"variables\" class=\"gt_row gt_left\">do</td>\n<td headers=\"data\" class=\"gt_row gt_right\">6.840000</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n:::\n:::\n\n\nWe notice that the variables names must be edited, By applying these transformations using the `mutate()` function and the `str_replace()` function, the variables names are updated, reflecting the desired replacements. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata = data  |>\n  mutate(\n    variables = str_replace(string = variables, pattern = \"do\", replacement = \"Dissolved Oxygen\"),\n    variables = str_replace(string = variables, pattern = \"temperature\", replacement = \"Temperature\"),\n    variables = str_replace(string = variables, pattern = \"ph\", replacement = \"pH\")\n  )\n```\n:::\n\n\n\n## Visualizing high frequency data\nOnce this high frequency dataset has been tidied, it is important to visualize the data to gain insights and identify patterns. Visualizing high frequency data can be challenging due to the sheer volume of data points. However, there are several techniques that can be used to effectively visualize this type of data. \n\nOne approach is to use a line chart to plot the data over time. This allows for easy identification of trends and patterns in the data. \n\n@fig-heats-all\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n  ggplot(aes(x = date, y = data)) +\n  geom_path() +\n  facet_wrap(~variables, scales = \"free_y\", nrow = 2)+\n  annotate(geom = \"rect\", xmin = lubridate::dmy_hms(011222000000), xmax = lubridate::dmy_hms(010223000000), ymin =Inf, ymax = Inf, fill = \"red\", alpha = .2 )+\n  scale_x_datetime(breaks = \"month\", labels = scales::label_date_short())+\n  theme_bw(base_size = 14)+\n  theme(axis.title.x = element_blank())\n```\n\n::: {.cell-output-display}\n![Line plot dissolved oxygen, pH and temperature over a period](ch13_files/figure-html/fig-heats-all-1.png){#fig-heats-all width=672}\n:::\n:::\n\nAnother technique is to use a heat map or density plot to visualize the distribution of the data. This can be particularly useful when dealing with large datasets. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nph = data |>\n  filter(variables == \"pH\") |>\n  mutate(hour = lubridate::hour(date), date = lubridate::as_date(date)) |>\n  filter(date < dmy(010423))|>\n  ggplot(aes(x = date, y = hour, z = data)) +\n  metR::geom_contour_fill()+\n  metR::geom_contour2(aes(label = ..level..), breaks = 8.05, skip = 10)+\n  scale_fill_gradientn(colours = oce::oce.colors9A(120), trans = scales::modulus_trans(p = 3), name = \"pH\")+\n  scale_y_reverse(breaks = seq(0,24,2), expand = c(0, NA), name = \"Hours\")+\n  scale_x_date(date_breaks = \"10 day\", labels = scales::label_date_short(), expand = c(0, NA))+\n  theme_bw(base_size = 14)+\n  theme(axis.title.x = element_blank())\n\nph\n```\n\n::: {.cell-output-display}\n![Hovmoller diagram of hour variation of pH over a period](ch13_files/figure-html/fig-heats-ph-1.png){#fig-heats-ph width=768}\n:::\n:::\n\n\nIt is also important to consider the scale of the visualization when dealing with high frequency data. Choosing an appropriate scale can help to highlight important features of the data while avoiding visual clutter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntemp = data |>\n  filter(variables == \"Temperature\") |>\n  mutate(hour = lubridate::hour(date), date = lubridate::as_date(date)) |>\n  filter(date < dmy(010423)) |>\n  ggplot(aes(x = date, y = hour, z = data)) +\n  metR::geom_contour_fill()+  \n  metR::geom_contour2(aes(label = ..level..), breaks = 28, skip = 0)+\n  scale_fill_gradientn(colours = my.colors2(120), trans = scales::modulus_trans(p = 0.001), name = \"SST\")+\n  scale_y_reverse(breaks = seq(0,24,2), expand = c(0, NA), name = \"Hours\")+\n  scale_x_date(date_breaks = \"10 day\", labels = scales::label_date_short(), expand = c(0, NA))+\n  theme_bw(base_size = 14)+\n  theme(axis.title.x = element_blank())\n\ntemp\n```\n\n::: {.cell-output-display}\n![Hovmoller diagram of hour variation of temperature over a period](ch13_files/figure-html/fig-heats-sst-1.png){#fig-heats-sst width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndo = data |>\n  filter(variables == \"Dissolved Oxygen\") |>\n  mutate(hour = lubridate::hour(date), date = lubridate::as_date(date)) |>\n  filter(date < dmy(010423) & hour >7 & hour < 21) |>\n  ggplot(aes(x = date, y = hour, z = data)) +\n  metR::geom_contour_fill()+  \n  metR::geom_contour2(aes(label = ..level..), breaks = 28, skip = 0)+\n  scale_fill_gradientn(colours = oce::oce.colorsJet(120), trans = scales::modulus_trans(p = 0.001), name = \"DO\")+\n  scale_y_reverse(breaks = seq(0,24,2), expand = c(0, NA), name = \"Hours\")+\n  scale_x_date(date_breaks = \"10 day\", labels = scales::label_date_short(), expand = c(0, NA))+\n  theme_bw(base_size = 14)+\n  theme(axis.title.x = element_blank())\n\ndo\n```\n\n::: {.cell-output-display}\n![Hovmoller diagram of hour variation of oxygen over a period](ch13_files/figure-html/fig-heats-do-1.png){#fig-heats-do width=768}\n:::\n:::\n\n\nOverall, the importance of visualizing high frequency data after tidying cannot be overstated, as it is a critical component of gaining insights and making informed decisions. To see the pattern of the three variables, we can use the *patchwork* package, which provides a simple and flexible way to arrange and combine multiple plots into a single layout. The package allows to arrange the plots horizontally or vertically using the `+` operator or the `/` operators, respectively. For example, here I arranged the heatmap of ph, temperature and dissolved oxygen vertically. T that I have just plotted w\n\nHere's a step-by-step guide on how to use patchwork\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(ph + theme(axis.text.x = element_blank())) / \n  (temp + theme(axis.text.x = element_blank())) / \n  do\n```\n\n::: {.cell-output-display}\n![Hovmoller diagram of hour variation of pH, temperature, and dissolved oxygen over a period](ch13_files/figure-html/fig-heats-1.png){#fig-heats width=768}\n:::\n:::\n",
    "supporting": [
      "ch13_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}