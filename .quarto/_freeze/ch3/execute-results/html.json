{
  "hash": "f38411c8d8ef99beda29d69cdcf40867",
  "result": {
    "markdown": "# Time  and Date\n\nIn this chapter, our primary focus is on working with data that represents time, specifically dates. We aim to equip you with the skills to visualize your data using graphical functions and to define custom functions. By the end of this chapter, you will have a better understanding of how to work with time-based data and how to present it in a meaningful way. Whether you are a data analyst or a researcher, these skills are essential for making informed decisions and communicating your findings effectively. So, let's dive in and explore the exciting world of time-based data analysis!\n\n\n## Dates\nDates play a crucial role in data analysis and represent an essential component in many datasets. In R, working with dates is made easy through a range of functions and packages specifically designed for handling date-related operations. Dates in R are represented as objects, allowing for convenient manipulation and calculations. \n\nWith R's built-in date functions and packages like `lubridate`, users can create, format, and perform various operations on date objects. These operations include extracting components like year, month, and day, performing arithmetic operations to calculate time intervals, comparing dates, and visualizing temporal data. With the flexibility and functionality offered by R, users can effectively work with dates to gain valuable insights and make informed decisions based on temporal patterns in their data.\n\n### Date and time classes in R\n\nIn R, there are specific classes designed for representing times and time-series data. These classes provide specialized functionalities for handling temporal information. Some of the commonly used classes include:\n\n1. **POSIXct**: This class represents time as the number of seconds since January 1, 1970 (known as the Unix epoch) in the UTC time zone. It offers precision up to the second and is suitable for handling timestamps.\n\n2. **POSIXlt**: Similar to the POSIXct class, POSIXlt represents time as the number of seconds since the Unix epoch. However, it provides more detailed components like year, month, day, hour, minute, and second. POSIXlt objects are useful when you need to work with individual time components.\n\n3. **Date**: The Date class is used to represent dates without time information. Dates are stored as the number of days since January 1, 1970. This class is useful when you want to work with dates and perform date-specific operations.\n\n4. **Time-Series**: R provides the `ts` class to handle time-series data, which is a combination of time and corresponding data values. The `ts` class allows for efficient storage and manipulation of time-series data and supports various time-based operations.\n\n5. **xts**: The `xts` (eXtensible Time Series) class is an extension of the `ts` class and provides enhanced functionality for working with time-series data. It includes features like subsetting, merging, and advanced time-based calculations.\n\nThese specialized classes make it easier to work with time and time-series data in R. In this book, we will only be working with the `Date` class, which is used to represent times of type *date*.\n\n### Working with `Date` objects\n\n#### Today's date\n\nThe Date data structure is the simplest and most basic way to represent dates in R. It is specifically designed to store dates without the inclusion of the time of day. One common use of Date is to represent calendar dates, such as birthdays, holidays, or any event that is not concerned with specific timestamps. \n\nTo obtain the current date in R, you can use the `Sys.Date()` function. This function retrieves the current system date and returns it as a Date object. Here's an example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_date <- Sys.Date()\ncurrent_date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-05-28\"\n```\n:::\n:::\n\nThe output will be the current date in the format *YYYY-MM-DD*, where *YYYY* represents the year, *MM* represents the month, and *DD* represents the day. By utilizing the `Sys.Date()` function, you can easily retrieve the current date for various purposes, such as tracking data entry, performing date-based calculations, or generating reports based on the current date.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncurrent_date |>\n  class()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n:::\n\n\n#### Converting `character` to `Date`\n\nIn addition to retrieving the current date using `Sys.Date()`, we can also convert character values to Date objects using the `as.Date()` function. This allows us to create Date objects representing specific dates of our choice.\n\nThe `as.Date()` function takes a character value as input and converts it to a Date object based on the specified format. The format is specified using the format parameter, which follows the conventions of the strftime() function in C. Here's an example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncustom_date <- as.Date(\"2023-05-24\", format = \"%Y-%m-%d\")\ncustom_date\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-05-24\"\n```\n:::\n:::\n\n\nIn this example, the character value \"2023-05-24\" is converted to a Date object using the %Y-%m-%d format, where %Y represents the year with century, %m represents the month, and %d represents the day.\n\n\nWhen the `character` values are in the standard date format (`YYYY-MM-DD`), such as in the above example, the `as.Date` function works without any additional arguments. However, when the `character` values are in a *non-standard* format, we need to specify the format definition with `format`, using the various date component symbols. Table [3.1] lists the most commonly used symbols for specifying date formats in R. The full list of symbols can be found in `?strptime`.\n\n|            |             |                                            |\n|------------|-------------|--------------------------------------------|\n|            |             | Table 3.1: Common `Date` format components |\n| **Symbol** | **Example** | **Meaning**                                |\n| `%d`       | `\"15\"`      | Day                                        |\n| `%m`       | `\"08\"`      | Month, numeric                             |\n| `%b`       | `\"Aug\"`     | Month, 3-letter                            |\n| `%B`       | `\"August\"`  | Month, full                                |\n| `%y`       | `14`        | Year, 2-digit                              |\n| `%Y`       | `2014`      | Year, 4-digit                              |\n\nBefore going into examples of date formatting, it is useful to set the standard `\"C\"` locale in R. That way, we make sure that month or weekday names are interpreted in *English* as intended:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.setlocale(\"LC_TIME\", \"C\") ## [1] \"C\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"C\"\n```\n:::\n:::\n\n\nFor example, converting the following `character` date---which is in a non-standard format---to `Date` fails when `format` is not specified:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"07/Aug/12\") \n\n# Error in charToDate(x) \n```\n:::\n\n\nSpecifying the right `format`, which is `\"%d/%b/%y\"` in this case, leads to a successful conversion:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"07/Aug/12\", format = \"%d/%b/%y\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2012-08-07\"\n```\n:::\n:::\n\n\n> What will be the result if we used `format=\"%y/%b/%d\"` (switching `%d` and `%y`) in the above expression?\n\nHere is another example with a different non-standart format (`\"%Y-%B-%d\"`):\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"2012-August-07\")\n# Error in charToDate(x) \n```\n:::\n\n\nUsing the `anytime::anytime()` function allows us to handle a broader range of date formats without explicitly specifying the format. It provides convenience and flexibility in parsing date strings and converting them to appropriate date objects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanytime::anytime((\"2012-August-07\") )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2012-08-07 EAT\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.Date(\"2012-August-07\", format = \"%Y-%B-%d\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2012-08-07\"\n```\n:::\n:::\n\n\n#### Converting `Date` to `character`\n\nA `Date` can always be converted back to `character` using `as.character`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd = as.Date(\"1961-12-09\") \nd \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1961-12-09\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(d) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Date\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(d) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1961-12-09\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(as.character(d)) ## [1] \"character\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"character\"\n```\n:::\n:::\n\n\nNote that both the `Date` and the `character` objects are printed exactly the same way, so we have to use `class` to figure out which class we are dealing with.\n\nThe `as.character` function, by default, returns a text string with all three date components in the standard `YYYY-MM-DD` (or `\"%Y-%m-%d\"`) format. Using the `format` argument, however, lets us compose different date formats, or *extract* individual date components out of a `Date` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1961-12-09\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(d, format = \"%m/%Y\") \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"12/1961\"\n```\n:::\n:::\n\n\n```{r           \nas.character(d, \"%d\") \n```\n\n```{r           \nas.character(d, \"%B\") \n```\n\n```{r           \nas.character(d, \"%Y\") \n```\n\nNote that `as.character` consistently returns a `character`, even when the result contains nothing but numbers, as in `\"%d\"` or `\"%Y\"`. We can always convert from `character` to `numeric` with `as.numeric` if necessary:\n\n```{r           \nas.numeric(as.character(d, \"%Y\")) \n```\n\n#### Arithmetic operations with dates\nArithmetic operations can be performed on `Date` objects in R, allowing for calculations involving dates and time intervals. Here are some common arithmetic operations that can be applied to `Date` objects:\n\n1. Addition and Subtraction:\n   - Adding/Subtracting Days: You can add or subtract a certain number of days to/from a `Date` object using the `+` and `-` operators. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\n     date1 <- as.Date(\"2023-05-24\")\n     date2 <- date1 + 7   # Adds 7 days to date1\n     date3 <- date1 - 3   # Subtracts 3 days from date1\n```\n:::\n\n\n   - Adding/Subtracting Weeks/Months/Years: Similarly, you can add or subtract weeks, months, or years using the same operators. R automatically adjusts the resulting date according to the specified time interval. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\n     date4 <- date1 + lubridate::weeks(2)   # Adds 2 weeks to date1\n     date5 <- date1 - lubridate::month(6)  # Subtracts 6 months from date1\n     date6 <- date1 + lubridate::years(1)   # Adds 1 year to date1\n```\n:::\n\n\n2. Calculating Time Differences:\n   You can calculate the time difference between two `Date` objects using the `-` operator. The result will be an object of class `difftime`, representing the difference in days. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\n   date1 <- as.Date(\"2023-05-24\")\n   date2 <- as.Date(\"2023-06-01\")\n   diff <- date2 - date1   # Calculates the difference in days between date2 and date1\n   diff\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 8 days\n```\n:::\n:::\n\n\n3. Comparing Dates:\n   Dates can be compared using comparison operators (`<`, `<=`, `>`, `>=`, `==`, `!=`) to check their relative order. This is useful for sorting or filtering data based on dates. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\n   date1 <- as.Date(\"2023-05-24\")\n   date2 <- as.Date(\"2023-06-01\")\n   date1 < date2   # Returns TRUE as date1 is earlier than date2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n\n\n#### Arithmetric operation with lubridate package\n\nThe *lubridate* package introduces intuitive functions like `ymd()` (year-month-day) for creating Date objects with a specified format. It also provides convenient helper functions such as` weeks()`, `months()`, and `years()` to perform arithmetic operations on dates. These functions enhance readability and simplify the code when working with dates and time intervals.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   library(lubridate)\n```\n:::\n\n\n\nBy utilizing the lubridate package, you can handle date arithmetic operations more intuitively and efficiently, making it easier to perform calculations and comparisons involving dates in your R code. Here are examples of arithmetic operations with dates using the `lubridate` package:\n\n1. Addition and Subtraction:\n\n::: {.cell}\n\n```{.r .cell-code}\n   date1 <- ymd(\"2023-05-24\")\n   date2 <- date1 + weeks(2)   # Adds 2 weeks to date1\n   date1 - months(6)  # Subtracts 6 months from date1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2022-11-24\"\n```\n:::\n:::\n\n\n2. Calculating Time Differences:\n\n::: {.cell}\n\n```{.r .cell-code}\n   date1 <- ymd(\"2023-05-24\")\n   date2 <- ymd(\"2023-06-01\")\ndate2 - date1   # Calculates the difference in days between date2 and date1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 8 days\n```\n:::\n:::\n\n\n3. Comparing Dates:\n\n::: {.cell}\n\n```{.r .cell-code}\n   date1 <- ymd(\"2023-05-24\")\n   date2 <- ymd(\"2023-06-01\")\n   date1 < date2   # Returns TRUE as date1 is earlier than date2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nFinally, the `seq` function, which we are already familiar with, can be used to create a sequence of consecutive dates in R. By specifying the starting date, ending date, and the desired interval, we can generate a sequence of dates.\n\nFor example, the following expression creates a sequence of dates from January 1, 2023, to January 10, 2023, with a daily interval:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(ymd(\"2023-01-01\"), ymd(\"2023-01-10\"), by = \"day\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"2023-01-01\" \"2023-01-02\" \"2023-01-03\" \"2023-01-04\" \"2023-01-05\"\n [6] \"2023-01-06\" \"2023-01-07\" \"2023-01-08\" \"2023-01-09\" \"2023-01-10\"\n```\n:::\n:::\n\n\nThe output is a sequence of `Date` objects representing consecutive dates from January 1, 2023, to January 10, 2023.\n\nBy adjusting the starting and ending dates and specifying a different interval (e.g., \"week\", \"month\", \"year\"), you can generate sequences of dates that suit your specific needs. This can be useful for generating date ranges, creating time-based indices, or iterating over a series of dates for analysis or visualization purposes.\n\n\n\n### Time series\n\nA time series is a sequence of data points collected and recorded over a period of time. In R, time series data can be represented and analyzed using specialized data structures and functions. The two main data structures for handling time series data in R are:\n\n1. **ts (Time Series)**: The `ts` object is a basic data structure in R for representing univariate time series. It is created using the `ts()` function, which takes the data as input and optionally accepts arguments for specifying the frequency and start time of the time series. Here's an example of creating a `ts` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- c(10, 15, 20, 25, 30)\nts_data <- ts(data, start = c(2020, 1), frequency = 1)\nts_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime Series:\nStart = 2020 \nEnd = 2024 \nFrequency = 1 \n[1] 10 15 20 25 30\n```\n:::\n:::\n\nIn this example, the `ts()` function is used to create a time series object `ts_data` from the numeric vector `data`. The `start` argument specifies the start time of the series (January 2020 in this case), and the `frequency` argument indicates the number of observations per unit of time (1 observation per year).\n\n2. **xts (eXtensible Time Series)**: The `xts` object is a more powerful and flexible data structure for handling time series data in R. It is part of the `xts` package, which extends the functionality of `ts` objects by providing additional features and methods for working with time series data. `xts` objects are created using the `xts()` function, and they can store both univariate and multivariate time series data. Here's an example of creating an `xts` object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the xts package\nlibrary(xts)\n\n# Create an xts object\ndata <- c(10, 15, 20, 25, 30)\ntime <- as.Date(c(\"2020-01-01\", \"2020-02-01\", \"2020-03-01\", \"2020-04-01\", \"2020-05-01\"))\nxts_data <- xts(data, order.by = time)\nxts_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n           [,1]\n2020-01-01   10\n2020-02-01   15\n2020-03-01   20\n2020-04-01   25\n2020-05-01   30\n```\n:::\n:::\n\nIn this example, the `xts()` function is used to create an `xts` object `xts_data`. The `data` argument contains the time series data, and the `order.by` argument specifies the corresponding time stamps for each observation.\n\nBoth `ts` and `xts` objects offer various methods and functions for analyzing and manipulating time series data in R. These include plotting, statistical analysis, time-based subsetting, aggregation, and more. Time series analysis techniques such as forecasting, seasonal decomposition, and autocorrelation analysis can also be applied to these data structures.\n\n\nHere are a few more examples of working with time series using the `ts` package in R:\n\n1. Creating a Monthly Time Series:\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate monthly time series data\n   \nts_data <- rnorm(n = 233, mean = 25, sd = 4) |>\nts(start = c(2004,1), frequency = 12)\nts_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Jan      Feb      Mar      Apr      May      Jun      Jul      Aug\n2004 14.74781 25.46688 20.50439 26.06081 19.08484 21.08044 23.45740 18.57261\n2005 22.13340 30.24903 28.51953 21.12515 27.30389 22.52658 23.47052 30.11469\n2006 16.27582 27.37721 25.60020 29.80502 29.11926 19.91884 22.11190 31.11152\n2007 33.72920 27.08315 20.90440 19.40813 28.06915 30.19177 30.30076 27.59431\n2008 27.16708 21.77838 25.88143 21.34045 17.02736 22.62716 27.55099 17.48557\n2009 18.35944 29.54533 24.67420 21.60934 28.10115 27.08557 18.52824 26.17246\n2010 25.78932 28.29462 26.66224 23.65757 20.71172 16.94170 27.60954 24.95769\n2011 16.79767 24.80603 30.10144 23.49664 24.84373 26.60351 31.38598 21.16260\n2012 22.59265 27.95870 23.78821 29.64875 28.45095 22.44216 24.01068 20.47284\n2013 26.33529 19.03980 25.23478 18.84127 24.00813 30.19608 20.11256 21.97585\n2014 23.01312 29.81151 29.08982 19.15088 24.76162 26.38414 21.02302 33.58700\n2015 31.49628 24.18298 24.96090 22.13469 24.36741 26.73912 20.47131 22.19941\n2016 25.08718 16.04119 25.31774 25.32757 30.12519 29.11489 28.17876 24.13547\n2017 21.72325 19.91837 19.37147 23.73474 24.33955 20.90653 28.46943 26.36190\n2018 29.48470 23.58262 24.42627 21.45971 17.96059 35.11920 20.60675 31.01668\n2019 21.23316 22.82433 23.46820 17.82889 20.54924 27.77987 26.09987 19.60782\n2020 28.98075 27.36108 30.55557 32.51606 24.53108 29.19327 24.11180 30.94042\n2021 24.57242 24.69647 26.72961 24.64428 30.44610 25.76650 25.02205 23.26870\n2022 26.42610 28.39235 23.70687 17.91268 33.04206 23.45669 25.66875 24.09364\n2023 27.39200 29.81333 29.81085 26.92161 22.85085                           \n          Sep      Oct      Nov      Dec\n2004 22.79385 25.53573 26.32870 30.85631\n2005 24.89605 26.80225 18.70784 29.96150\n2006 19.87213 29.95444 26.56868 20.19432\n2007 27.37739 20.70057 24.73431 26.09642\n2008 29.52925 31.98205 21.04970 28.46272\n2009 24.77562 22.26052 25.53011 29.08084\n2010 21.47375 25.37017 22.93835 35.86601\n2011 33.77580 23.42968 32.75940 23.10161\n2012 18.35201 25.26843 20.68595 27.08916\n2013 27.78270 28.12227 26.93004 26.80132\n2014 26.88997 21.47888 24.87013 27.02277\n2015 23.12800 25.71919 24.73327 26.04201\n2016 28.40811 21.53323 23.20109 29.54210\n2017 37.87974 26.26356 28.46372 33.38593\n2018 31.76887 24.41763 19.25150 23.25284\n2019 21.41990 27.49392 17.98803 30.07582\n2020 28.14265 27.68696 27.72108 29.26007\n2021 25.95433 18.56609 31.27320 30.26822\n2022 23.81255 15.72077 29.16249 24.84366\n2023                                    \n```\n:::\n:::\n\n\n2.*Subsetting Time Series Data*\n\nSubsetting time series data involves extracting a portion of the data based on specific criteria, such as a range of dates or a subset of observations. In R, subsetting time series data can be done using various approaches.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   # Subset time series data for a specific period\nsubset_data <- ts_data |>\n  window(start = c(2020, 1), end = c(2021, 6))\nsubset_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Jan      Feb      Mar      Apr      May      Jun      Jul      Aug\n2020 28.98075 27.36108 30.55557 32.51606 24.53108 29.19327 24.11180 30.94042\n2021 24.57242 24.69647 26.72961 24.64428 30.44610 25.76650                  \n          Sep      Oct      Nov      Dec\n2020 28.14265 27.68696 27.72108 29.26007\n2021                                    \n```\n:::\n:::\n\n\n3. *Plotting Time Series Data*\n\nPlotting time series data is a common task in analyzing and visualizing temporal patterns and trends. In R, there are various packages and functions available for creating plots of time series data. Let's explore two commonly used plotting methods: base R plots and ggplot2 package.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Time series plotted with base-R](ch3_files/figure-html/fig-base-1.png){#fig-base width=672}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Time series plotted with ggplot](ch3_files/figure-html/fig-ggplot-1.png){#fig-ggplot width=672}\n:::\n:::\n\n\n4. *Calculating Summary Statistics*:\nWhen working with time series data, calculating summary statistics often involves considering specific aspects related to the temporal dimension. Here are some common summary statistics for time series data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   # Calculate summary statistics of the time series data\n   summary(ts_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  14.75   22.13   25.23   25.17   28.14   37.88 \n```\n:::\n:::\n\n\n5. *Applying Smoothing Techniques*:\nSmoothing techniques are commonly used in time series analysis to reduce noise, identify patterns, and reveal underlying trends in the data. In R, there are several smoothing techniques available that can be applied to time series data. Let's explore some commonly used smoothing techniques and their implementation in R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   # Apply moving average smoothing to the time series data\n   smoothed_data <- filter(ts_data, filter = rep(1/3, 3), sides = 2)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Smoothed time series](ch3_files/figure-html/fig-filtered-1.png){#fig-filtered width=672}\n:::\n:::\n\n\n6. *Decomposing Time Series Components*:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n   # Decompose the time series data into trend, seasonal, and random components\n   decomposition <- decompose(ts_data)\n   trend <- decomposition$trend\n   seasonal <- decomposition$seasonal\n   random <- decomposition$random\n```\n:::\n\n\n\n### Applying Smoothing Techniques\nSmoothing techniques are commonly used in time series analysis to reduce noise, identify patterns, and reveal underlying trends in the data. In R, there are several smoothing techniques available that can be applied to time series data. Let's explore some commonly used smoothing techniques and their implementation in R:\n\n1. **Moving Average**: The moving average is a simple smoothing technique that calculates the average of a fixed window of observations. It helps to smooth out short-term fluctuations and highlight the overall trend. In R, you can apply the moving average using the `ma()` function from the `forecast` package. For example:\n```R\n   # Apply moving average smoothing\n   smoothed_data <- ma(ts_data, order = 5)  # Moving average with a window of size 5\n```\n\n2. **Exponential Smoothing**: Exponential smoothing is a popular smoothing technique that assigns exponentially decreasing weights to past observations. It places more emphasis on recent observations and is suitable for data with a changing trend. In R, you can apply exponential smoothing using the `ets()` function from the `forecast` package. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\n   # Apply exponential smoothing\nsmoothed_data <- ts_data |>\n  forecast::ets()\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![ETS smoothed time series](ch3_files/figure-html/fig-ets-1.png){#fig-ets width=672}\n:::\n:::\n\n\n\n\n3. **Loess Smoothing**: Loess smoothing is a non-parametric technique that fits a smooth curve through the data using local weighted regression. It is effective in capturing complex patterns and is particularly useful for data with irregular or nonlinear trends. In R, you can apply loess smoothing using the `loess()` function. For example:\n\n::: {.cell}\n\n```{.r .cell-code}\n   # Apply loess smoothing\n   smoothed_data <- loess(ts_data ~ time(ts_data))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![loess smoothed time series](ch3_files/figure-html/fig-loess-1.png){#fig-loess width=672}\n:::\n:::\n\n\n\n4. **Spline Smoothing**: Spline smoothing is a flexible technique that fits a piecewise polynomial function to the data. It is useful for capturing both local and global trends in the time series. In R, you can apply spline smoothing using the `smooth.spline()` function. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Apply spline smoothing\n   smoothed_data <- smooth.spline(time(ts_data), ts_data)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![Spline smoothed](ch3_files/figure-html/fig-spline-1.png){#fig-spline width=672}\n:::\n:::\n",
    "supporting": [
      "ch3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}