{"title":"Time  and Date","markdown":{"headingText":"Time  and Date","containsRefs":false,"markdown":"\nIn this chapter, our primary focus is on working with data that represents time, specifically dates. We aim to equip you with the skills to visualize your data using graphical functions and to define custom functions. By the end of this chapter, you will have a better understanding of how to work with time-based data and how to present it in a meaningful way. Whether you are a data analyst or a researcher, these skills are essential for making informed decisions and communicating your findings effectively. So, let's dive in and explore the exciting world of time-based data analysis!\n\n\n## Dates\nDates play a crucial role in data analysis and represent an essential component in many datasets. In R, working with dates is made easy through a range of functions and packages specifically designed for handling date-related operations. Dates in R are represented as objects, allowing for convenient manipulation and calculations. \n\nWith R's built-in date functions and packages like `lubridate`, users can create, format, and perform various operations on date objects. These operations include extracting components like year, month, and day, performing arithmetic operations to calculate time intervals, comparing dates, and visualizing temporal data. With the flexibility and functionality offered by R, users can effectively work with dates to gain valuable insights and make informed decisions based on temporal patterns in their data.\n\n### Date and time classes in R\n\nIn R, there are specific classes designed for representing times and time-series data. These classes provide specialized functionalities for handling temporal information. Some of the commonly used classes include:\n\n1. **POSIXct**: This class represents time as the number of seconds since January 1, 1970 (known as the Unix epoch) in the UTC time zone. It offers precision up to the second and is suitable for handling timestamps.\n\n2. **POSIXlt**: Similar to the POSIXct class, POSIXlt represents time as the number of seconds since the Unix epoch. However, it provides more detailed components like year, month, day, hour, minute, and second. POSIXlt objects are useful when you need to work with individual time components.\n\n3. **Date**: The Date class is used to represent dates without time information. Dates are stored as the number of days since January 1, 1970. This class is useful when you want to work with dates and perform date-specific operations.\n\n4. **Time-Series**: R provides the `ts` class to handle time-series data, which is a combination of time and corresponding data values. The `ts` class allows for efficient storage and manipulation of time-series data and supports various time-based operations.\n\n5. **xts**: The `xts` (eXtensible Time Series) class is an extension of the `ts` class and provides enhanced functionality for working with time-series data. It includes features like subsetting, merging, and advanced time-based calculations.\n\nThese specialized classes make it easier to work with time and time-series data in R. In this book, we will only be working with the `Date` class, which is used to represent times of type *date*.\n\n### Working with `Date` objects\n\n#### Today's date\n\nThe Date data structure is the simplest and most basic way to represent dates in R. It is specifically designed to store dates without the inclusion of the time of day. One common use of Date is to represent calendar dates, such as birthdays, holidays, or any event that is not concerned with specific timestamps. \n\nTo obtain the current date in R, you can use the `Sys.Date()` function. This function retrieves the current system date and returns it as a Date object. Here's an example:\n\n\n```{r}\ncurrent_date <- Sys.Date()\ncurrent_date\n```\nThe output will be the current date in the format *YYYY-MM-DD*, where *YYYY* represents the year, *MM* represents the month, and *DD* represents the day. By utilizing the `Sys.Date()` function, you can easily retrieve the current date for various purposes, such as tracking data entry, performing date-based calculations, or generating reports based on the current date.\n\n\n\n```{r}       \n\ncurrent_date |>\n  class()\n```\n\n#### Converting `character` to `Date`\n\nIn addition to retrieving the current date using `Sys.Date()`, we can also convert character values to Date objects using the `as.Date()` function. This allows us to create Date objects representing specific dates of our choice.\n\nThe `as.Date()` function takes a character value as input and converts it to a Date object based on the specified format. The format is specified using the format parameter, which follows the conventions of the strftime() function in C. Here's an example:\n\n```{r}\ncustom_date <- as.Date(\"2023-05-24\", format = \"%Y-%m-%d\")\ncustom_date\n```\n\nIn this example, the character value \"2023-05-24\" is converted to a Date object using the %Y-%m-%d format, where %Y represents the year with century, %m represents the month, and %d represents the day.\n\n\nWhen the `character` values are in the standard date format (`YYYY-MM-DD`), such as in the above example, the `as.Date` function works without any additional arguments. However, when the `character` values are in a *non-standard* format, we need to specify the format definition with `format`, using the various date component symbols. Table [3.1] lists the most commonly used symbols for specifying date formats in R. The full list of symbols can be found in `?strptime`.\n\n|            |             |                                            |\n|------------|-------------|--------------------------------------------|\n|            |             | Table 3.1: Common `Date` format components |\n| **Symbol** | **Example** | **Meaning**                                |\n| `%d`       | `\"15\"`      | Day                                        |\n| `%m`       | `\"08\"`      | Month, numeric                             |\n| `%b`       | `\"Aug\"`     | Month, 3-letter                            |\n| `%B`       | `\"August\"`  | Month, full                                |\n| `%y`       | `14`        | Year, 2-digit                              |\n| `%Y`       | `2014`      | Year, 4-digit                              |\n\nBefore going into examples of date formatting, it is useful to set the standard `\"C\"` locale in R. That way, we make sure that month or weekday names are interpreted in *English* as intended:\n\n```{r}         \nSys.setlocale(\"LC_TIME\", \"C\") ## [1] \"C\"\n```\n\nFor example, converting the following `character` date---which is in a non-standard format---to `Date` fails when `format` is not specified:\n\n```{r} \n#| eval: false\nas.Date(\"07/Aug/12\") \n\n# Error in charToDate(x) \n```\n\nSpecifying the right `format`, which is `\"%d/%b/%y\"` in this case, leads to a successful conversion:\n\n```{r}         \nas.Date(\"07/Aug/12\", format = \"%d/%b/%y\") \n```\n\n> What will be the result if we used `format=\"%y/%b/%d\"` (switching `%d` and `%y`) in the above expression?\n\nHere is another example with a different non-standart format (`\"%Y-%B-%d\"`):\n\n```{r}   \n#| eval: false\n#| \nas.Date(\"2012-August-07\")\n# Error in charToDate(x) \n```\n\nUsing the `anytime::anytime()` function allows us to handle a broader range of date formats without explicitly specifying the format. It provides convenience and flexibility in parsing date strings and converting them to appropriate date objects.\n\n```{r}         \nanytime::anytime((\"2012-August-07\") )\n```\n\n```{r}         \nas.Date(\"2012-August-07\", format = \"%Y-%B-%d\") \n```\n\n#### Converting `Date` to `character`\n\nA `Date` can always be converted back to `character` using `as.character`:\n\n```{r}         \nd = as.Date(\"1961-12-09\") \nd \n```\n\n```{r}           \nclass(d) \n```\n\n```{r}          \nas.character(d) \n```\n\n```{r}           \nclass(as.character(d)) ## [1] \"character\"\n```\n\nNote that both the `Date` and the `character` objects are printed exactly the same way, so we have to use `class` to figure out which class we are dealing with.\n\nThe `as.character` function, by default, returns a text string with all three date components in the standard `YYYY-MM-DD` (or `\"%Y-%m-%d\"`) format. Using the `format` argument, however, lets us compose different date formats, or *extract* individual date components out of a `Date` object:\n\n```{r}         \nd \n```\n\n```{r}          \nas.character(d, format = \"%m/%Y\") \n```\n\n```{r           \nas.character(d, \"%d\") \n```\n\n```{r           \nas.character(d, \"%B\") \n```\n\n```{r           \nas.character(d, \"%Y\") \n```\n\nNote that `as.character` consistently returns a `character`, even when the result contains nothing but numbers, as in `\"%d\"` or `\"%Y\"`. We can always convert from `character` to `numeric` with `as.numeric` if necessary:\n\n```{r           \nas.numeric(as.character(d, \"%Y\")) \n```\n\n#### Arithmetic operations with dates\nArithmetic operations can be performed on `Date` objects in R, allowing for calculations involving dates and time intervals. Here are some common arithmetic operations that can be applied to `Date` objects:\n\n1. Addition and Subtraction:\n   - Adding/Subtracting Days: You can add or subtract a certain number of days to/from a `Date` object using the `+` and `-` operators. For example:\n```{r}\n     date1 <- as.Date(\"2023-05-24\")\n     date2 <- date1 + 7   # Adds 7 days to date1\n     date3 <- date1 - 3   # Subtracts 3 days from date1\n```\n\n   - Adding/Subtracting Weeks/Months/Years: Similarly, you can add or subtract weeks, months, or years using the same operators. R automatically adjusts the resulting date according to the specified time interval. For example:\n```{r}\n\n     date4 <- date1 + lubridate::weeks(2)   # Adds 2 weeks to date1\n     date5 <- date1 - lubridate::month(6)  # Subtracts 6 months from date1\n     date6 <- date1 + lubridate::years(1)   # Adds 1 year to date1\n```\n\n2. Calculating Time Differences:\n   You can calculate the time difference between two `Date` objects using the `-` operator. The result will be an object of class `difftime`, representing the difference in days. For example:\n```{r}\n   date1 <- as.Date(\"2023-05-24\")\n   date2 <- as.Date(\"2023-06-01\")\n   diff <- date2 - date1   # Calculates the difference in days between date2 and date1\n   diff\n```\n\n3. Comparing Dates:\n   Dates can be compared using comparison operators (`<`, `<=`, `>`, `>=`, `==`, `!=`) to check their relative order. This is useful for sorting or filtering data based on dates. For example:\n```{r}\n   date1 <- as.Date(\"2023-05-24\")\n   date2 <- as.Date(\"2023-06-01\")\n   date1 < date2   # Returns TRUE as date1 is earlier than date2\n```\n\n\n\n#### Arithmetric operation with lubridate package\n\nThe *lubridate* package introduces intuitive functions like `ymd()` (year-month-day) for creating Date objects with a specified format. It also provides convenient helper functions such as` weeks()`, `months()`, and `years()` to perform arithmetic operations on dates. These functions enhance readability and simplify the code when working with dates and time intervals.\n\n```{r}\n   library(lubridate)\n```\n\n\nBy utilizing the lubridate package, you can handle date arithmetic operations more intuitively and efficiently, making it easier to perform calculations and comparisons involving dates in your R code. Here are examples of arithmetic operations with dates using the `lubridate` package:\n\n1. Addition and Subtraction:\n```{r}\n   \n   date1 <- ymd(\"2023-05-24\")\n   date2 <- date1 + weeks(2)   # Adds 2 weeks to date1\n   date1 - months(6)  # Subtracts 6 months from date1\n```\n\n2. Calculating Time Differences:\n```{r}\n\n   date1 <- ymd(\"2023-05-24\")\n   date2 <- ymd(\"2023-06-01\")\ndate2 - date1   # Calculates the difference in days between date2 and date1\n```\n\n3. Comparing Dates:\n```{r}\n\n   date1 <- ymd(\"2023-05-24\")\n   date2 <- ymd(\"2023-06-01\")\n   date1 < date2   # Returns TRUE as date1 is earlier than date2\n```\n\nFinally, the `seq` function, which we are already familiar with, can be used to create a sequence of consecutive dates in R. By specifying the starting date, ending date, and the desired interval, we can generate a sequence of dates.\n\nFor example, the following expression creates a sequence of dates from January 1, 2023, to January 10, 2023, with a daily interval:\n\n```{r}\nseq(ymd(\"2023-01-01\"), ymd(\"2023-01-10\"), by = \"day\")\n```\n\nThe output is a sequence of `Date` objects representing consecutive dates from January 1, 2023, to January 10, 2023.\n\nBy adjusting the starting and ending dates and specifying a different interval (e.g., \"week\", \"month\", \"year\"), you can generate sequences of dates that suit your specific needs. This can be useful for generating date ranges, creating time-based indices, or iterating over a series of dates for analysis or visualization purposes.\n\n\n\n### Time series\n\nA time series is a sequence of data points collected and recorded over a period of time. In R, time series data can be represented and analyzed using specialized data structures and functions. The two main data structures for handling time series data in R are:\n\n1. **ts (Time Series)**: The `ts` object is a basic data structure in R for representing univariate time series. It is created using the `ts()` function, which takes the data as input and optionally accepts arguments for specifying the frequency and start time of the time series. Here's an example of creating a `ts` object:\n\n```{r}\ndata <- c(10, 15, 20, 25, 30)\nts_data <- ts(data, start = c(2020, 1), frequency = 1)\nts_data\n```\nIn this example, the `ts()` function is used to create a time series object `ts_data` from the numeric vector `data`. The `start` argument specifies the start time of the series (January 2020 in this case), and the `frequency` argument indicates the number of observations per unit of time (1 observation per year).\n\n2. **xts (eXtensible Time Series)**: The `xts` object is a more powerful and flexible data structure for handling time series data in R. It is part of the `xts` package, which extends the functionality of `ts` objects by providing additional features and methods for working with time series data. `xts` objects are created using the `xts()` function, and they can store both univariate and multivariate time series data. Here's an example of creating an `xts` object:\n\n```{r}\n# Load the xts package\nlibrary(xts)\n\n# Create an xts object\ndata <- c(10, 15, 20, 25, 30)\ntime <- as.Date(c(\"2020-01-01\", \"2020-02-01\", \"2020-03-01\", \"2020-04-01\", \"2020-05-01\"))\nxts_data <- xts(data, order.by = time)\nxts_data\n```\nIn this example, the `xts()` function is used to create an `xts` object `xts_data`. The `data` argument contains the time series data, and the `order.by` argument specifies the corresponding time stamps for each observation.\n\nBoth `ts` and `xts` objects offer various methods and functions for analyzing and manipulating time series data in R. These include plotting, statistical analysis, time-based subsetting, aggregation, and more. Time series analysis techniques such as forecasting, seasonal decomposition, and autocorrelation analysis can also be applied to these data structures.\n\n\nHere are a few more examples of working with time series using the `ts` package in R:\n\n1. Creating a Monthly Time Series:\n```{r}\n# Generate monthly time series data\n   \nts_data <- rnorm(n = 233, mean = 25, sd = 4) |>\nts(start = c(2004,1), frequency = 12)\nts_data\n```\n\n2.*Subsetting Time Series Data*\n\nSubsetting time series data involves extracting a portion of the data based on specific criteria, such as a range of dates or a subset of observations. In R, subsetting time series data can be done using various approaches.\n\n```{r}\n   # Subset time series data for a specific period\nsubset_data <- ts_data |>\n  window(start = c(2020, 1), end = c(2021, 6))\nsubset_data\n```\n\n3. *Plotting Time Series Data*\n\nPlotting time series data is a common task in analyzing and visualizing temporal patterns and trends. In R, there are various packages and functions available for creating plots of time series data. Let's explore two commonly used plotting methods: base R plots and ggplot2 package.\n\n```{r}\n#| label: fig-base\n#| fig-cap: Time series plotted with base-R\n#| echo: false\n#| \nts_data |>\n  plot(main = \"Time Series Data\", xlab = \"Time\", ylab = \"Value\")\n```\n\n```{r}\n#| label: fig-ggplot\n#| fig-cap: Time series plotted with ggplot\n#| echo: false\n#| \nts_data |> \n  forecast::autoplot()+\n  ggplot2::labs(title = \"Monthly Temperature\", x = \"Time\", y = expression(Temperature~degree*C))\n\n```\n\n4. *Calculating Summary Statistics*:\nWhen working with time series data, calculating summary statistics often involves considering specific aspects related to the temporal dimension. Here are some common summary statistics for time series data\n\n```{r}\n   # Calculate summary statistics of the time series data\n   summary(ts_data)\n```\n\n5. *Applying Smoothing Techniques*:\nSmoothing techniques are commonly used in time series analysis to reduce noise, identify patterns, and reveal underlying trends in the data. In R, there are several smoothing techniques available that can be applied to time series data. Let's explore some commonly used smoothing techniques and their implementation in R\n\n```{r}\n   # Apply moving average smoothing to the time series data\n   smoothed_data <- filter(ts_data, filter = rep(1/3, 3), sides = 2)\n```\n```{r}\n#| label: fig-filtered\n#| fig-cap: Smoothed time series\n#| echo: false\n#| \n\nsmoothed_data |> \n  forecast::autoplot()+\n  ggplot2::labs(title = \"Monthly Temperature\", x = \"Time\", y = expression(Temperature~degree*C))\n\n```\n\n6. *Decomposing Time Series Components*:\n\n```{r}\n\n   # Decompose the time series data into trend, seasonal, and random components\n   decomposition <- decompose(ts_data)\n   trend <- decomposition$trend\n   seasonal <- decomposition$seasonal\n   random <- decomposition$random\n```\n\n\n### Applying Smoothing Techniques\nSmoothing techniques are commonly used in time series analysis to reduce noise, identify patterns, and reveal underlying trends in the data. In R, there are several smoothing techniques available that can be applied to time series data. Let's explore some commonly used smoothing techniques and their implementation in R:\n\n1. **Moving Average**: The moving average is a simple smoothing technique that calculates the average of a fixed window of observations. It helps to smooth out short-term fluctuations and highlight the overall trend. In R, you can apply the moving average using the `ma()` function from the `forecast` package. For example:\n```R\n   # Apply moving average smoothing\n   smoothed_data <- ma(ts_data, order = 5)  # Moving average with a window of size 5\n```\n\n2. **Exponential Smoothing**: Exponential smoothing is a popular smoothing technique that assigns exponentially decreasing weights to past observations. It places more emphasis on recent observations and is suitable for data with a changing trend. In R, you can apply exponential smoothing using the `ets()` function from the `forecast` package. For example:\n```{r}\n   # Apply exponential smoothing\nsmoothed_data <- ts_data |>\n  forecast::ets()\n```\n\n\n```{r}\n#| label: fig-ets\n#| fig-cap: ETS smoothed time series\n#| echo: false\n#| \nsmoothed_data |>\n  plot()\n```\n\n\n\n3. **Loess Smoothing**: Loess smoothing is a non-parametric technique that fits a smooth curve through the data using local weighted regression. It is effective in capturing complex patterns and is particularly useful for data with irregular or nonlinear trends. In R, you can apply loess smoothing using the `loess()` function. For example:\n```{r}\n   # Apply loess smoothing\n   smoothed_data <- loess(ts_data ~ time(ts_data))\n```\n\n```{r}\n#| label: fig-loess\n#| fig-cap: loess smoothed time series\n#| echo: false\n#| \nsmoothed_data |>\n  plot()\n```\n\n\n4. **Spline Smoothing**: Spline smoothing is a flexible technique that fits a piecewise polynomial function to the data. It is useful for capturing both local and global trends in the time series. In R, you can apply spline smoothing using the `smooth.spline()` function. For example:\n\n```{r}\n# Apply spline smoothing\n   smoothed_data <- smooth.spline(time(ts_data), ts_data)\n```\n\n\n```{r}\n#| label: fig-spline\n#| fig-cap: Spline smoothed\n#| echo: false\n#| \nsmoothed_data |>\n  plot()\n```\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":"","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["style.css"],"highlight-style":"ayu-mirage","output-file":"ch3.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.319","bibliography":["references.bib"],"linkcolor":"blue","citecolor":"red","crossref":{"fig-title":"**FIGURE**","fig-labels":"arabic","tbl-title":"**TABLE**","tbl-labels":"arabic","title-delim":"**.**"},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":"","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","css":["style.css"],"highlight-style":"ayu-mirage","output-file":"ch3.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"linkcolor":"blue","citecolor":"red","crossref":{"fig-title":"**FIGURE**","fig-labels":"arabic","tbl-title":"**TABLE**","tbl-labels":"arabic","title-delim":"**.**"},"documentclass":"scrbook"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}