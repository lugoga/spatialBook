{"title":"Vectors","markdown":{"headingText":"Vectors","containsRefs":false,"markdown":"\nThe primary objectives of this chapter revolve around three key areas. Firstly, we aim to equip readers with the skills to effectively work with R code files, allowing them to efficiently manage and execute their code. Secondly, we focus on familiarizing readers with the fundamental data structure in R, namely the vector. By understanding the intricacies and functionalities of vectors, readers will gain a solid foundation for handling and manipulating data in R. Lastly, we delve into the essential concept of subsetting, which plays a pivotal role in data analysis. Through this chapter, readers will acquire the necessary knowledge and techniques to extract and manipulate subsets of data, empowering them to conduct insightful and meaningful analyses in R.\n\n### Using code files\n\nIn @sec-introduction, we typed short and simple expressions into the R console.As we advance in our learning journey, we will transition from typing short and simple expressions directly into the R console to working with longer and more complex code. To facilitate the editing and saving of such code, we store it in dedicated code files. Code files provide a structured and organized approach to managing our R code, allowing us to easily modify, save, and reuse our code for future use. This practice becomes particularly crucial as our projects and analyses become more intricate, enabling us to maintain clarity and efficiency in our coding endeavors..\n\nWhen it comes to writing computer code, it is crucial to use a plain text editor, such as [Notepad++](https://notepad-plus-plus.org/downloads/) or RStudio, rather than a word processor like Microsoft Word. The reasons for avoiding word processors when writing code are as follows:\n\n1.  **Formatting and Encoding:** Word processors often add formatting and special characters that are not compatible with code. These additional formatting elements can introduce errors or cause the code to be misinterpreted by the compiler or interpreter.\n\n2.  **Rich Text and Styling:** Word processors allow for rich text formatting, including different fonts, sizes, colors, and styles. However, these formatting options are not relevant or recognized by code editors, and they may result in syntax errors or unexpected behavior.\n\n3.  **Hidden Characters:** Word processors may include hidden characters for formatting purposes, such as line breaks or tab spaces. These characters can interfere with the intended structure and functionality of the code.\n\n4.  **File Format:** Word processors typically save files in proprietary formats like .doc or .docx, which are not plain text formats. Code files, on the other hand, are commonly saved with plain text extensions like `.R` or `.txt`. Using a plain text editor ensures that the code is saved in the appropriate format.\n\n5.  **Integration with Development Environment:** Specialized code editors, such as RStudio (*See* @sec-r), offer features and functions specifically designed for coding, such as syntax highlighting, auto-completion, and debugging tools. These features greatly enhance the coding experience and make it easier to write, debug, and manage code.\n\n## RStudio keyboard stortcuts\n\nRStudio provides several handy keyboard shortcuts that streamline the process of editing and executing code files. Here are some useful RStudio keyboard shortcuts:\n\n1.  **Ctrl + Enter**: Executes the currently selected line or the highlighted code chunk.\n\n2.  **Ctrl + Shift + Enter**: Executes the current line or selected code chunk and moves the cursor to the next line.\n\n3.  **Ctrl + Shift + Up/Down Arrow**: Moves the current line or selected lines up or down within the script.\n\n4.  **Ctrl + L**: Clears the console.\n\n5.  **Ctrl + 1/2/3/4**: Switches between the different panes in RStudio (Source, Console, Environment, and Plots).\n\n6.  **Ctrl + Shift + M**: Inserts a new Markdown chunk in an R Markdown document.\n\n7.  **Ctrl + Shift + K**: Knits the current R Markdown document to the specified output format.\n\n8.  **Ctrl + Shift + C**: Comments or uncomments the selected lines or the current line.\n\n9.  **Ctrl + Shift + R**: Runs the current line or selected code as R code (useful for running lines in R Markdown documents).\n\n10. **Ctrl + Shift + T**: Surrounds the selected text with a tag in an R Markdown document.\n\nThese are just a few examples of the keyboard shortcuts available in RStudio. To explore more shortcuts or customize them according to your preferences, you can go to the \"Tools\" menu in RStudio, select \"Modify Keyboard Shortcuts,\" and browse through the available options.\n\n## Vectors\n\n### What is a vector?\n\nThe vector is indeed the simplest data structure in R and serves as our introductory topic in this book. In R, a vector is an ordered collection of values that share the same data type. It can contain elements of various types, such as numeric, character, logical, or factors. Here are a few examples illustrating the concept of a vector:\n\n-   Numeric vector: c(1.5, 2.7, 3.9, 4.2)\n\n-   Character vector: c(\"apple\", \"banana\", \"orange\")\n\n-   Logical vector: c(TRUE, FALSE, TRUE, FALSE)\n\n-   Factor vector: factor(c(\"low\", \"medium\", \"high\", \"low\"))\n\nEach of these examples represents a vector with elements of the same data type. The elements within a vector maintain their order, allowing for easy indexing and manipulation. Understanding vectors is fundamental as they serve as building blocks for more complex data structures and facilitate data analysis and manipulation in R.\n\n### The `c` function\n\nVectors can be created with the `c` function, which *combines* the given vectors, in the specified order. For example:\n\n```{r}       \nx = c(1, 2, 3) \nx \n```\nThe `c()` function in R is not limited to combining individual values but can also be used to combine multiple vectors of different lengths into a new vector. Here's an example that demonstrates this capability:\n\n```{r}\nv1 <- c(1, 2, 3)\nv2 <- c(4)\nv3 <- c(5, 6, 7)\nv4 <- c(8, 9)\n\ncombined_vector <- c(v1, v2, v3, v4)\ncombined_vector\n```\n\nThe `c()` function in R can indeed be used to combine vectors of different lengths into a new vector. Here's the corrected example:\n\n```{r}\nv1 <- c(1, 2, 3)\nv2 <- c(4)\nv3 <- c(5, 6, 7)\nv4 <- c(8, 9)\n\ncombined_vector <- c(v1, v2, v3, v4)\ncombined_vector\n\n```\n\n\nThe expression `c(x, 84, x, c(-1, -2))` combines the values from multiple vectors into a new vector. However, since the value of x is not provided, I'll demonstrate the general concept using a placeholder value.\n\n\nHere is another example of using the `c` function, this time to combine four `character` values into a vector of length 4. \n\n```{r}         \ny = c(\"cat\", \"dog\", \"mouse\", \"apple\") \ny\n```\n\n\n### Vector subsetting (individual elements)\n\nIn R, individual elements of a vector can be accessed using the `[` operator along with a numeric index. This indexing mechanism allows us to retrieve a specific element from the vector, effectively creating a subset containing only that element. By specifying the desired index within square brackets, we can extract the value associated with that position in the vector. For example, `my_vector[3]` would retrieve the third element of the vector `my_vector`. This capability provides flexibility in working with vectors, allowing us to selectively access and manipulate individual elements as needed for our data analysis and computations.\n\n```{r}          \ny[1] \n```\n```{r}           \ny[2] \n```\n\n\n```{r}  \n\ny[3] \n```\n\n```{r}           \ny[4]\n```\n\nNote that numeric indices in R start at `1`^[10](https://geobgu.xyz/r-2021/vectors.html#fn10)^!\n\nHere is another example:\n\n```{r}       \ncounts = c(2, 0, 3, 1, 3, 2, 9, 0, 2, 1, 11, 2) \ncounts[4] \n```\n\nWe can also make an assignment into a vector subset, for example to replace an individual element:\n\n```{r}         \nx = c(1, 2, 3)\nx \n```\n\n``` {r}        \nx[2] = 300 \nx \n```\n\nIndeed, in the example you provided, we made an assignment into a subset with a single element. However, as we progress in our learning, we will discover that assigning values into subsets can be done for subsets of any length. This flexibility allows us to modify specific elements or even replace entire subsets within a vector. By specifying the desired subset using indexing techniques, we can assign new values to those elements, effectively updating or altering the vector according to our requirements.\n\nThis capability becomes particularly valuable when performing data manipulations, transformations, or when updating specific data points within a larger dataset. As we delve deeper into R, we will explore various techniques and approaches for assigning values into subsets of different lengths, empowering us to efficiently manipulate and update our data as needed.\n\n\n### Calling functions on a vector\n\nR provides a wide range of functions that allow us to calculate various properties of vectors. Some commonly used functions include length, min, max, range, mean, and sum. Here's an example that showcases their usage:\n\n``` {r}       \nx = c(1, 6, 3, -8, 2) \nx \n```\n\n``` {r}         \nlength(x)  \n```\n\n``` {r}        \nmin(x)    \n```\n\n``` {r}          \nmax(x)     \n```\n\n``` {r}           \nrange(x)   \n```\n\n``` {r}           \nmean(x)    \n```\n\n``` {r}           \nsum(x)     \n```\n\n\n::: callout-note\nIn what way is the `range` function different from the other functions shown above?\n:::\n\nContrariwise, there are functions that operate on each vector element, *separately*, returning a vector of results having the same length as the input:\n\n``` {r}        \nabs(x)   # Absolute value ## [1] 1 6 3 8 2\n```\n\n``` {r}         \nsqrt(x)  \nx\n```\n\n### The recycling rule (arithmetic)\n\nWhen binary operations, such as arithmetic operators (+, -, *, /), are applied to two vectors in R, the operations are performed element-by-element. This means that each corresponding pair of elements from the two vectors is operated upon independently, resulting in a new vector of the respective results. Here's an example that demonstrates this behavior:\n\n```{r}\nvector1 <- c(1, 2, 3)\nvector2 <- c(4, 5, 6)\n```\n\n\n```{r}\nvector1 + vector2\n```\n\n\n```{r}\nvector1 - vector2\n```\n\n\n```{r}\nvector1 * vector2\n```\n\n\n```{r}\nvector1 / vector2\n\n```\n\n\n```{r}        \nvector1 > vector2\n```\n\n```{r}         \nvector1 < vector2\n```\n\nWhat happens when the input vector lengths do not match? In such case, the shorter vector gets **\"recycled\"**. For example, when one of the vectors is of length 3 and the other vector is of length 6, then the shorter vector (of length 3) is replicated two times, until it matches the longer vector (Figure [2.7](https://geobgu.xyz/r-2021/vectors.html#fig:vector-recycling)). Thus, the expression:\n\n```{r}      \nc(1, 2, 3)  + c(1, 2, 3, 4, 5, 6) \n```\n\nis similar to the expression:\n\n```{r}         \nc(1, 2, 3, 1, 2, 3) + c(1, 2, 3, 4, 5, 6) \n```\n\n\nWhen one of the vectors is of length 1 and the other is of length 4, the shorter vector (of length 1) is replicated 4 times:\n\n```{r}         \n2  * c(1, 2, 3, 4) \n```\n\n```{r}         \nc(2, 2, 2, 2) * c(1, 2, 3, 4) \n```\n\nWhen one of the vectors is of length 2 and the other is of length 6, the shorter vector (of length 2) is replicated 3 times:\n\n```{r}        \nc(10, 100) + c(1, 2, 3, 4, 5, 6) \n```\n\n```{r}        \nc(10, 100, 10, 100, 10, 100) + c(1, 2, 3, 4, 5, 6) \n```\n\nWhat happens when the longer vector length is not a multiple of the shorter vector length? When the longer vector length is not a multiple of the shorter vector length, a situation arises where recycling is incomplete. This means that the elements of the shorter vector cannot be evenly distributed or recycled to match the length of the longer vector. As a result, some elements from the shorter vector will be used to fill up the longer vector, but there will be remaining elements in the shorter vector that do not have corresponding positions in the longer vector. \n\nIn programming languages like R, this incomplete recycling is indicated by a warning message, which alerts the user to the fact that the two vectors are not compatible for recycling. It is important to ensure that vector lengths are compatible before attempting to recycle elements, as incomplete recycling\n\n\n```{r}        \nc(1, 2) * c(1, 2, 3) \n```\n\n```{r}          \nc(1, 2, 1) * c(1, 2, 3) \n```\n\n\n### Consecutive and repetitive vectors\nIn addition to the `c` function, there are three commonly used methods for creating consecutive or repetitive vectors: the `seq` and `rep` functions. \n\nThe `seq` function generates a sequence of numbers that can be either increasing or decreasing. It takes arguments such as the starting point, ending point, and the increment or decrement value. For example, `seq(1, 10, 2)` creates a vector with the numbers 1, 3, 5, 7, 9, indicating an increasing sequence with a step of 2.\n\n```{r}\nseq(1, 10, 2)\n```\n\n Generate a decreasing sequence from 10 to 1 with a step of 1\n```{r}\nseq(10, 1, -1)\n\n```\n\n\nThe `rep` function, on the other hand, replicates elements of a vector. It can replicate a single element or an entire vector multiple times. By specifying the `times` argument, you can control the number of repetitions. For instance, `rep(c(1, 2, 3), times = 3)` generates a vector containing three repetitions of the sequence 1, 2, 3: 1, 2, 3, 1, 2, 3, 1, 2, 3.\n\n```{r}\nrep(1:3, times = 3)\n```\n\n\n\nReplicate a vector multiple times\n```{r}\n\nrep(c(\"A\", \"B\", \"C\"), each = 3)\n\n```\n\nThese functions provide flexible ways to create consecutive or repetitive vectors in programming languages like R, allowing for efficient generation of data for various purposes.\n\n\n### Function calls\n\nBy utilizing the `seq` function, we will illustrate three characteristics of function calls. Initially, it is possible to exclude parameter names provided that the arguments are provided in the default order. For instance, the subsequent function calls are equivalent as the default order of the first three parameters of the `seq` function is `from`, `to`, and `by`:\n\n```{r}        \nseq(from = 5, to = 10, by = 1) ## [1]  5  6  7  8  9 10\n```\n\n```{r}         \nseq(5, 10, 1) ## [1]  5  6  7  8  9 10\n```\n\nFurthermore, we can utilize any argument order by explicitly specifying parameter names. This allows for flexibility in function calls. Even if the order of arguments is different, the following three function calls are equivalent due to the usage of parameter names:\n\n```{r}        \nseq(to = 10, by = 1, from = 5) \n```\n\n```{r}         \nseq(by = 1, from = 5, to = 10) \n```\n\n```{r}         \nseq(from = 5, by = 1, to = 10) \n```\n\nLastly, it is possible to exclude parameters that have a default argument defined in the function. A default argument is a predefined value specified in the function definition. As an illustration, the `by` parameter in the `seq` function has a default value of `1`. Hence, if the `by` argument is omitted in the function call, it will automatically be assigned the default value of `1`:\n\n```{r}         \nseq(5, 10, 1) \n```\n\n```{r}        \nseq(5, 10) \n```\n\nThe order of parameters, their default values (if any), and other relevant information about a specific function can be found in the help file associated with that function. The help file provides comprehensive documentation that describes the function's usage, arguments, return values, and often includes examples and additional explanations. \n\nIt is a valuable resource for understanding and utilizing functions effectively in programming languages like R. To access the help file for a specific function, you can use the `?` operator followed by the function name in the R console or refer to the documentation provided by the programming environment or package documentation.\n\n```         \n?seq\n```\n\n### Vector subsetting (general)\n\nVector subsetting refers to the process of selecting specific elements from a vector based on certain criteria or indices. It allows you to extract a subset of data from a vector that meets your desired conditions or requirements. There are different ways to perform vector subsetting in various programming languages, including R.\n\nIn R, vector subsetting can be done using square brackets `[ ]` and various indexing methods. Here are a few commonly used approaches:\n\n\n```{r}         \nx = c(43, 85, 10) \nx[3] \n```\n\nWe can also use a vector of length \\>1 as an index. For example, the following expression returns the first *and* second elements of `x`, since the index is the the vector `c(1,2)` (which we create using the `:` operator) (Section [2.3.6.2](https://geobgu.xyz/r-2021/vectors.html#consecutive-vectors)):\n\n```{r}       \nx[1:2] \n```\n\nNote that the vector of indices can consist of any combination of indices whatsoever. It does not have to be consecutive, and it can even include repetitions:\n\n```{r}        \nx[c(1, 1, 3, 2)] \n```\n\nHere is another example:\n\n```{r}        \ncounts = c(2, 0, 3, 1, 3) \ncounts[1:3] \n```\n\nAnd here is one more example where the index is not consecutive:\n\n```{r}          \ncounts = c(2, 0, 3, 1, 3, 2, 9, 0, 2, 1, 11, 2) \ncounts[c(1:3, 7:9)] ## [1] 2 0 3 9 0 2\n```\n\nFor the next examples, let's create a vector of all *even* numbers between 1 and 100:\n\n```{r}         \nx = seq(2, 100, 2) \nx ##  [1]   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38 ## [20]  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76 ## [39]  78  80  82  84  86  88  90  92  94  96  98 100\n```\n\n> What is the meaning of the numbers in square brackets when printing the vector?\n\nHow can we check how many elements does `x` have? Recall the `length` function :\n\n```{r}        \nlength(x) ## [1] 50\n```\n\nUsing this knowledge, here are two expression that return the value of the *last* element in `x`:\n\n```{r}        \nx[50] \n```\n\n```{r}         \nx[length(x)] \n```\n\n> Which of the last two expressions is preferable? Why?\n\nWhich index can we use to get back the entire vector? We can use an index that contains all of the vector element indices, starting from `1` and up to `length(x)`:\n\n```{r}         \nx[1:length(x)] ##  [1]   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38 ## [20]  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76 ## [39]  78  80  82  84  86  88  90  92  94  96  98 100\n```\n\n> What index can we use to get the entire vector *except for* the last two elements?\n\n> What index can we use to get a *reversed* vector?\n\nNote that there is a special function named `rev` for reversing a vector:\n\n```{r}         \nrev(x) ##  [1] 100  98  96  94  92  90  88  86  84  82  80  78  76  74  72  70  68  66  64 ## [20]  62  60  58  56  54  52  50  48  46  44  42  40  38  36  34  32  30  28  26 ## [39]  24  22  20  18  16  14  12  10   8   6   4   2\n```\n\nNote that, when requesting an element, or elements, beyond the vector length, we get `NA` (*Not Available*) value(s). For example:\n\n```{r}         \nx[55] ## [1] NA\n```\n\n```{r}         \nx[1:80] ##  [1]   2   4   6   8  10  12  14  16  18  20  22  24  26  28  30  32  34  36  38 ## [20]  40  42  44  46  48  50  52  54  56  58  60  62  64  66  68  70  72  74  76 ## [39]  78  80  82  84  86  88  90  92  94  96  98 100  NA  NA  NA  NA  NA  NA  NA ## [58]  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA  NA ## [77]  NA  NA  NA  NA\n```\n\n### The recycling rule (assignment)\n\n\nThe recycling rule in R also applies to assignment operations. When assigning a vector of length 1 to a subset of a longer vector, R will recycle the single value to match the length of the subset. This ensures that the assignment can be performed consistently across the subset.For example, here we assign a vector of length 1 (`NA`) into a subset of length 6 (`c(1:3,7:9)`). As a result, `NA` is replicated six times, to match the subset. Here's an example illustrating this behavior:\n\n```{r}         \ncounts = c(2, 0, 3, 1, 3, 2, 9, 0, 2, 1, 11, 2) \ncounts ##  [1]  2  0  3  1  3  2  9  0  2  1 11  2\n```\n\n```{r}          \ncounts[c(1:3, 7:9)] = NA \ncounts ##  [1] NA NA NA  1  3  2 NA NA NA  1 11  2\n```\n\nHere, `c(NA,99)` is replicated three times, also to match the subset of length 6:\n\n```{r}         \ncounts[c(1:3, 7:9)] = c(NA, 99) \ncounts ##  [1] NA 99 NA  1  3  2 99 NA 99  1 11  2\n```\n\n### Logical vectors\n\n#### Creating logical vectors\n\nThe third common type of vectors in R, alongside `numeric` and `character` vectors, is the `logical` vector. A `logical` vector consists of `logical` values, which are primarily represented by `TRUE` and `FALSE`. These values are used to denote logical conditions or Boolean expressions in R. Here's an example of a `logical` vector:\n\n```{r}\n# Create a logical vector\nmy_logical_vector <- c(TRUE, FALSE, TRUE, FALSE, NA)\n\n# Output the logical vector\nmy_logical_vector\n```\n\nn the provided case, the logical vector is composed of five elements: `TRUE`, `FALSE`, `TRUE`, `FALSE`, and `NA` (representing missing or undefined values). Logical vectors are commonly used for logical operations, conditional statements, filtering data, and controlling program flow in R. They allow for the representation and manipulation of logical conditions and Boolean values within vectorized operations.\n\n```{r}        \nc(TRUE, FALSE, FALSE) ## [1]  TRUE FALSE FALSE\n```\n\n```{r}        \nrep(TRUE, 7) ## [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE\n```\n\nLogical vectors are typically created by applying conditional operators to numeric or character vectors. These conditional operators evaluate each element of the vector and return a logical value (TRUE or FALSE) based on the specified condition.\n\n```{r}         \nx = 1:10 \nx \n```\n\n```{r}         \nx >= 7 \n```\n\nNote how the recycling rule applies to conditional operators in the above expression.\n\nAn important property of `logical` vectors is, that, when arithmetic operations are applied, the `logical` vector is automatically *converted* to a numeric one, where `TRUE` becomes `1` and `FALSE` becomes `0`. For example:\n\n```{r}         \nTRUE + FALSE ## [1] 1\n```\n\n```{r}         \nsum(x >= 7) ## [1] 4\n```\n\n```{r}         \nmean(x >= 7) ## [1] 0.4\n```\n\n::: layout-important\n What is the meaning of the values `4` and `0.4` in the above example?\n :::\n \n \n#### Subsetting with logical vectors\n\nExactly! In addition to using a numeric vector of indices for subsetting, a logical vector can also be used as an index. When a logical vector is used as an index for subsetting, the resulting subset will include the elements that correspond to the TRUE positions in the index.\nFor example:\n\n```{r}         \ncounts = c(2, 0, 3, 1, 3)\n```\n\n\n\n```{r}         \ncounts[c(TRUE, FALSE, TRUE, FALSE, FALSE)] ## [1] 2 3\n```\n\nHere is another example, where the `logical` vector of indices is created from the same vector being subsetted:\n\n\n```{r}        \ncounts[counts < 3] ## [1] 2 0 1\n```\n\nIn this example, the logical vector `counts<3`:\n\n```{r}          \ncounts < 3 ## [1]  TRUE  TRUE FALSE  TRUE FALSE\n```\n\nspecifies whether to *include* each of the elements of `counts` in the resulting subset (Figure [2.10](https://geobgu.xyz/r-2021/vectors.html#fig:subset-logical)).\n\n> What does the expression `counts[counts<3]` *do*, in plain language?\n\nFigure 2.10: Subsetting with a logical vector\n\nHere are some more examples of subsetting with a `logical` index:\n\n```{r}         \nx = 1:10 \nx \n```\n\n```{r}           \nx[x >= 3]         # Elements of 'x' greater or equal than 3 ## [1]  3  4  5  6  7  8  9 10\n```\n\n```{r}           \nx[x != 2]         # Elements of 'x' not equal to 2  ## [1]  1  3  4  5  6  7  8  9 10\n```\n\n```{r}          \nx[x > 4 | x < 2]  # Elements of 'x' greater than 4 or smaller than 2 ## [1]  1  5  6  7  8  9 10\n```\n\n```{r}          \nx[x > 4 & x < 2]  # Elements of 'x' greater than 4 and smaller than 2 ## integer(0)\n```\n\n> What does the output `integer(0)`, which we got in the last expression, mean?\n\nThe next example is slightly more complex; we select the elements of `z` whose square is larger than 8:\n\n```{r}          \nz = c(5, 2, -3, 8) \nz[z^2 > 8] ## [1]  5 -3  8\n```\n\nLet's go over this step-by-step. First, `z^2` gives a vector of squared `z` values (`2` is recycled):\n\n```{r}          \nz^2 ## [1] 25  4  9 64\n```\n\nThen, each of the squares is compared to 8 (`8` is recycled):\n\n```{r}          \nz^2 > 8 ## [1]  TRUE FALSE  TRUE  TRUE\n```\n\nFinally, the `logical` vector `z^2>8` is used for subsetting `z`.\n\n### Missing values\n\nMissing values, often represented as NA in R, are used to indicate the absence or unavailability of data for a particular element in a vector. Missing values play a crucial role in handling incomplete or undefined information within datasets. It\n\n-   accepts a vector, of any type, and\n-   returns a `logical` vector, with `TRUE` in place of `NA` values and `FALSE` in place of non-`NA` values.\n\nFor example, suppose we have a vector `x` where some of the values are missing:\n\n```{r}          \nx = c(28, 58, NA, 31, 39, NA, 9) \nx ## [1] 28 58 NA 31 39 NA  9\n```\n\nThe `is.na` function can be used to detect which values are missing:\n\n```{r}          \nis.na(x) ## [1] FALSE FALSE  TRUE FALSE FALSE  TRUE FALSE\n```\n\n> How can we use the above expression to subset the *non-missing* values of `x`?\n\nMany of the functions that summarize vector properties, such as `sum` and `mean`, have a parameter called `na.rm`. The `na.rm` parameter is used to determine whether `NA` values are *excluded* from the calculation. The default is `na.rm=FALSE`, meaning that `NA` values are *not* excluded. For example:\n\n```{r}          \nx = c(28, 58, NA, 31, 39, NA, 9) \nmean(x) \n```\n\n> Why do we get `NA` in the first expression?\n\n> What do you think will be the result of `length(x)`?\n\n> How can we replace the `NA` values in `x` with the mean of its non-`NA` values?\n\n## Additional useful functions\n\n### `any` and `all`\n\nSometimes we want to figure out whether a `logical` vector:\n\n-   contains *at least one* `TRUE` value; or\n\n-   is *entirely* composed of `TRUE` values.\n\nWe can use the `any` and `all` functions, respectively, to do those things.\n\nThe `any` function returns `TRUE` if at least *one* of the input vector values is `TRUE`, otherwise it returns `FALSE`. For example, let's take a numeric vector `x`:\n\n```{r}         \nx = c(2, 6, 2, 3, 0, 1, 6) \nx ## [1] 2 6 2 3 0 1 6\n```\n\nThe expression `any(x > 5)` returns `TRUE`, which means that the vector `x > 5` contains at least one `TRUE` value, i.e., at least one element of `x` is greater than `5`:\n\n```{r}          \nx > 5 \n```\n\nThe expression `any(x > 88)` returns `FALSE`, which means that the vector `x > 88` contains no `TRUE` values, i.e., none of the elements of `x` are greater than `88`:\n\n```{r}        \nx > 88 ## [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE any(x > 88) ## [1] FALSE\n```\n\nThe `all` function returns `TRUE` if *all* of the input vector values are `TRUE`, otherwise it returns `FALSE`. For example, the expression `all(x > 5)` returns `FALSE`, which means that the vector `x > 5` contains at least one `FALSE` value, i.e., *not* all elements of `x` are greater than `5`:\n\n```{r}           \nx > 5 ## [1] FALSE  TRUE FALSE FALSE FALSE FALSE  TRUE all(x > 5) ## [1] FALSE\n```\n\nThe expression `all(x > -1)` returns `TRUE`, which means that `x > -1` is composed entirely of `TRUE` values, i.e., all elements of `x` are greater than `-1`:\n\n```{r}           \nx > -1 \n```\n\nIn a way, `any` and `all` are *inverse*:\n\n-   `any` determines if the logical vector contains at least one `TRUE` value.\n\n-   `all` determines if the logical vector contains at least one `FALSE` value.\n\n### `which`\n\nThe `which` function converts a `logical` vector to a `numeric` one, with the *indices* of `TRUE` values. That way, we can find out the index of values that satisfy a given condition. For example, considering the vector `x`:\n\n```{r}           \nx ## [1] 2 6 2 3 0 1 6\n```\n\nthe expression `which(x > 2.3)` returns the indices of `TRUE` elements in `x > 2.3`, i.e., the indices of `x` elements which are greater than `2.3`:\n\n```{r}        \nx > 2.3 ## [1] FALSE  TRUE FALSE  TRUE FALSE FALSE  TRUE which(x > 2.3) ## [1] 2 4 7\n```\n\n### `which.min` and `which.max`\n\nRelated to the which function, there are two additional functions in R: which.min and which.max. These functions return the index of the first occurrence of the minimum or maximum value in a vector, respectively.\n\nHere's an example illustrating the usage of which.min and which.max functions with a vector x:\n\n```{r}         \nx \n```\n\nusing `which.min` we can find out that the *minimal* value of `x` is in the 5^th^ position:\n\n```{r}          \nwhich.min(x) \n```\n\nwhile using `which.max` we can find out that the *maximal* value of `x` is in the 2^nd^ position:\n\n```{r}       \nwhich.max(x) \n```\n\n:::{}\n\n:::\n\n### The `order` function\n\nThe `order` function returns ordered vector indices, based on the order of vector values. In other words, `order` gives the index of the smallest value, the index of the second smallest value, etc., up to the index of the largest value. For example, given the vector `x`:\n\n``` {r}   \n#| eval: false\nx ~ [1] 2 6 2 3 0 1 6\n```\n\n`order(x)` returns the indices `1:length(x)`, ordered from smallest to largest value:\n\n``` {r}        \norder(x) ## [1] 5 6 1 3 4 2 7\n```\n\nThis result tells us that the 5^th^ element of `x` is the smallest, the 6^th^ is the second smallest, and so on.\n\nWe can also get the *reverse* order with `decreasing=TRUE`:\n\n```         \norder(x, decreasing = TRUE) ## [1] 2 7 4 1 3 6 5\n```\n\n> How can we get a *sorted* vector of elements from `x`, as shown below, using the `order` function?\n\n``` {r}          \n## [1] 0 1 2 2 3 6 6\n```\n\n### `paste` and `paste0`\n\nThe `paste` function is used to \"paste\" text values. Its `sep` parameter determines the separating character(s), with the default being `sep=\" \"` (a space). For example:\n\n``` {r}          \npaste(\"There are\", \"5\", \"books.\") ## [1] \"There are 5 books.\" paste(\"There are\", \"5\", \"books.\", sep = \"_\") ## [1] \"There are_5_books.\"\n```\n\nNon-character vectors are automatically converted to `character` before pasting:\n\n``` {r}        \npaste(\"There are\", 80, \"books.\") ## [1] \"There are 80 books.\"\n```\n\nThe recycling rule applies in `paste` too:\n\n``` {r}       \npaste(\"image\", 1:5, \".tif\", sep = \"\") ## [1] \"image1.tif\" \"image2.tif\" \"image3.tif\" \"image4.tif\" \"image5.tif\"\n```\n\nThe `paste0` function is a shortcut for `paste` with `sep=\"\"`:\n\n``` {r}          \npaste0(\"image\", 1:5, \".tif\") ## [1] \"image1.tif\" \"image2.tif\" \"image3.tif\" \"image4.tif\" \"image5.tif\"\n```\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":"","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["style.css"],"highlight-style":"ayu-mirage","output-file":"ch2.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.319","bibliography":["references.bib"],"linkcolor":"blue","citecolor":"red","crossref":{"fig-title":"**FIGURE**","fig-labels":"arabic","tbl-title":"**TABLE**","tbl-labels":"arabic","title-delim":"**.**"},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":"","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","css":["style.css"],"highlight-style":"ayu-mirage","output-file":"ch2.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"linkcolor":"blue","citecolor":"red","crossref":{"fig-title":"**FIGURE**","fig-labels":"arabic","tbl-title":"**TABLE**","tbl-labels":"arabic","title-delim":"**.**"},"documentclass":"scrbook"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}