{"title":"Data types and data frame","markdown":{"headingText":"Data types and data frame","containsRefs":false,"markdown":"\nBefore the beginning of data collection, it should be clearly defined which type of data one wants to collect. It may be operational data, biological data, economic data or socio-cultural data. Each data type may be used for a variety of indicators. Catch, for instance, may be used both in calculations of revenue for economic purposes and as a rough measure of resource depletion. The length frequency data of the catch can be collected for determining the healthy of the stock. The selection of a data type also depends on the available analyses. \n\nThere are several kind of data and require different kinds of statistical methods. For *quantitative* data we create boxplots and compute means, but for *qualitative* data we donâ€™t. Instead we produce bar charts and summarise the data in tables either in percentage or proportion. We can summarize qualitative data by counting the number of observations in each category or by computing the proportion of the observations in each category. However, even when the qualitative data are identified by a numerical code, arithmetic operations such as addition, subtraction, multiplication, and division do not provide meaningful results. Arithmetic operations provide meaningful results for quantitative variables.\n\nIn R, a variable describes what kind of object is assigned to it. We can assign many different types of objects to the variable. It may for instance contain a `number`, `text`, `date`. In order to treat a correctly, R needs to know what data type its assigned object has. In some programming languages, you have to explicitly state what data type a variable has, but not in R. This makes programming in R simpler and faster, but can cause problems if a variable turns out to have a different data type than what you thought. The common six data types are highlighted in @fig-datatypes;\n\n```{r}\n#| label: fig-datatypes\n#| fig-cap: Common data types often collected and stored for anaysis and modelling \n#| fig-pos: H\n#| echo: false\n#| out-width: \"100%\"\n\nknitr::include_graphics(\"graphics/chp3E/DATATYPES-01.png\")\n```\n\n\nFor most people, it suffices to know about the first three in the list below:\n\n1. *numeric*: numbers like 1 and 16.823 (sometimes also called double);\n1. *logical*: true/false values (boolean): either TRUE or FALSE;\n1. *character*: text, e.g. \"a\", \"Indian Ocean.\" and \"FAO\";\n1. *integer*: integer numbers, denoted in R by the letter L: 1L, 55L;\n1. *complex*: complex numbers, like 2+3i. Rarely used in statistical work.\n1. *date*: date like 2022-12-15\n\nIn addition, these can be combined into special data types sometimes called data structures, examples of which include `vectors` and `data frames`. Important data structures include factor, which is used to store categorical data, and the awkwardly named POSIXct which is used to store date and time data.\n\n### Vectors\nOften times we want to store a set of numbers in once place. One way to do this is using the vectors in R. Vector is the most basic data structure in R. It is a sequence of elements of the same data type. if the elements are of different data types, they be coerced to a common type that can accommodate all the elements. Vector are generally created using the `c()` function widely called `concatenate`, though depending on the type vector being created, other method. Vectors store several numbers-- a set of numbers in one container. let us look on the example below\n\n```{r}\nid = c(1,2,3,4,5)\nmean.tl = c(158,659,782,659,759)\ncountry = c(\"Somalia\", \"Kenya\", \"Mauritius\", \"Seychelles\",  \"Mozambique\")\n```\n\nNotice that the `c()` function, which is short for concatenate wraps the list of numbers. The `c()` function combines all numbers together into one container. Notice also that all the individual numbers are separated with a comma. The comma is referred to an an item-delimiter. It allows R to hold each of the numbers separately. This is vital as without the item-delimiter, R will treat a vector as one big, unseperated number.\n\n#### Numeric vector\n\nThe most common data type in R is numeric. The numeric class holds the set of real numbers --- decimal place numbers. We create a numeric vector using a `c()` function but you can use any function that creates a sequence of numbers.  For example, we can create a numeric vector of SST as follows;\n\n```{r}\nsst = c(25.4, 26, 28, 27.8, 29, 24.8, 22.3)\n```\n\nWe can check whether the variable sst is numeric with `is.numeric` function\n```{r}\nis.numeric(sst)\n```\n\n\n#### Integer vector\n\nInteger vector data type is actually a special case of numeric data. Unlike `numeric`, `integer` values do not have decimal places.They are commonly used for counting or indexing.  Creating an integer vector is similar to numeric vector except that we need to instruct R to treat the data as integer and not numeric or double. To command R creating integer, we specify a suffix `L` to an element\n\n```{r}\ndepth = c(5L, 10L, 15L, 20L, 25L,30L)\nis.vector(depth);class(depth)\n```\n\n\n::: callout-note\nif your variable does not have decimals, R will automatically set the type as integers instead of numeric.\n:::\n\n\n```{r}\naa = c(20,68,78,50)\n```\n\nYou can check if the data is integer with `is.integer()` and can convert numeric value to an integer with `as.integer()` \n\n```{r}\nis.integer(aa)\n\n```\n\nYou can query the class of the object with the `class()` to know the class of the object\n```{r}\nclass(aa)\n\n```\n\nAlthough the object bb is integer as confirmed with `as.integer()` function, the `class()` ouput the answer as numeric. This is because the defaul type of number in r is numeric. However, you can use the function `as.integer()` to convert numeric value to integer\n\n```{r}\nclass(as.integer(aa))\n```\n\n\n#### Character vector\nIn programming terms, we usually call text as *string*. This often are `text` data like names. A character vector may contain a single character , a word or a group of words. The elements must be enclosed with a single or double quotations mark.\n\n```{r}\nsites = c(\"Pemba Channel\", \"Zanzibar Channnel\", \"Pemba Channel\")\nis.vector(sites); class(sites)\n```\n\nWe can be sure whether the object is a string with `is.character()` or check the class of the object with `class()`.\n\n```{r}\ncountries = c(\"Kenya\", \"Uganda\", \"Rwanda\", \"Tanzania\")\nclass(countries)\n```\n\n\n::: callout-note   \nEverything inside `\"\"` will be considered as character, no matter if it looks like character or not\n:::\n\n\n#### Factor\n\nFactor variables are a special case of character variables in the sense that it also contains text. However, factor variables are used when there are a limited number of unique character strings. It often represents a categorical variable. For instance, the gender will usually take on only two values, \\\"female\\\" or \\\"male\\\" (and will be considered as a factor variable) whereas the name will generally have lots of possibilities (and thus will be considered as a character variable). To create a factor variable use the `factor()` function:\n```{r}\n    maturity.stage <- factor(c(\"I\", \"II\", \"III\", \"IV\", \"V\"))\n    maturity.stage\n```\n\n\nTo know the different levels of a factor variable, use `levels()`:\n\n```{r}\n levels(maturity.stage)\n```\n  \n   \nBy default, the levels are sorted alphabetically. You can reorder the levels with the argument `levels` in the `factor()` function:\n\n```{r}\nmature <- factor(maturity.stage, levels = c(\"V\", \"III\"))\n    levels(mature)\n```\n  \n\nCharacter strings can be converted to factors with `as.factor()`:\n\n```{r}\n text <- c(\"test1\", \"test2\", \"test1\", \"test1\") # create a character vector\n    class(text) # to know the class\n```\n   \n```{r}\n text_factor <- as.factor(text) # transform to factor\n    class(text_factor) # recheck the class\n```\n\n   \nThe character strings have been transformed to factors, as shown by its class of the type `factor`.\n\n\nOften we wish to take a continuous numerical vector and transform it into a factor. The function `cut()` takes a vector of numerical data and creates a factor based on your give cut-points. Let us make a fictional total length of 508 bigeye tuna with `rnorm()` function. \n\n```{r, fig.width=3, fig.height=2}\n#| label: fig-hist\n#| fig-cap: Normal distribution of bigeye tuna's tota length\n#| fig-pos: H\n#| fig-width: 5\n#| fig-height: 4\n#| warning: false\n#| message: false\n#| comment: \"\"\n\n## Simulate data for plotting\ntl.cm = rnorm(n = 508, mean = 40, sd = 18)\n\ntl.cm |>\n  tibble::as.tibble() |>\n  ggstatsplot::gghistostats(x = value, binwidth = 10, test.value = 40.2, type = \"n\", normal.curve = T, centrality.type = \"p\", xlab = \"Total length (cm)\")\n```\n\nWe can now breaks the distribution into groups and make a simple plot as shown in @fig-lfq, where frequency of bigeye tuna color coded with the group size\n\n```{r}\n\ngroup = cut(tl.cm, breaks = c(0,30,60,110),\n            labels = c(\"Below 20\", \"30-60\", \"Above 60\"))\nis.factor(group)\nlevels(group)\n```\n\n\n```{r}\n#| label: fig-bar\n#| fig-pos: H\n#| fig-cap: Length frequency of bigeye tuna\n#| fig-width: 6\n#| fig-height: 4\n\nbarplot(table(group), las = 1, horiz = FALSE, col = c(\"blue\", \"green\", \"red\"), ylab = \"Frequency\", xlab = \"\")\n```\n\n\n#### Logical\nLogical data (or simply logical ) represent the logical `TRUE` state and the logical `FALSE` state. Logical variables are the variables in which logical data are stored. Logical variables can assume only two states:\n\n+ FALSE, always represent by 0;\n+ TRUE, always represented by a nonzero object. Usually, the digit 1 is used for TRUE. \n\nWe can create logical variables indirectly, through logical operations, such as the result of a comparison between two numbers. These operations return logical values. For example, type the following statement at the R console: \n\n\n```{r}\n5 > 3;\n5 < 3\n```\n\nSince 5 is indeed greater than 3, the result of the comparison is true, however, 5 is not less than 3, and hence the comparison is false. The sign `>` and `<` are relational operators, returning logical data types as a result. \n\n\n\n```{r}\n value1 <- 7\n    value2 <- 9\n```\n   \n```{r}\n    greater <- value1 > value2\n    greater\n    class(greater)\n\n```\n\n \n```{r}\n    # is value1 less than or equal to value2?\n    less <- value1 <= value2\n    less\n    class(less)\n\n```\n\n\nIt is also possible to transform logical data into numeric data. After the transformation from logical to numeric with the `as.numeric()` command, `FALSE` values equal to 0 and `TRUE` values equal to 1:\n\n```{r}\n greater_num <- as.numeric(greater)\n    sum(greater)\n```\n   \n```{r}\n   less_num <- as.numeric(less)\n    sum(less)\n```\n\n\nConversely, numeric data can be converted to logical data, with `FALSE` for all values equal to 0 and `TRUE` for all other values.\n\n```{r}\n  x <- 0\n  as.logical(x)\n```\n\n\n```{r}\n y <- 5\nas.logical(y)\n```\n\n3## Date and Time\n\nDate and time are also treated as vector in R\n\n```{r}\ndate.time = seq(lubridate::dmy(010121), \n                lubridate::dmy(250121), \n                length.out = 5)\ndate.time\n```\n\n\n#### Generating sequence of vectors Numbers\n\nThere are few R operators that are designed for creating vecor of non-random numbers. These functions provide multiple ways for generating sequences of numbers\n\nThe colon `:` operator, explicitly generate regular sequence of numbers between the lower and upper boundary numbers specified. For example, generating number beween 0 and 10, we simply write;\n\n```{r}\nvector.seq = 0:10\nvector.seq\n```\n\nHowever, if you want to generate a vector of sequence number with specified interval, let say we want to generate number between 0 and 10 with interval of 2, then the `seq()` function is used\n```{r}\nregular.vector = seq(from = 0,to = 10, by = 2)\nregular.vector\n```\n\nunlike the `seq()` function and `:` operator that works with numbers, the `rep()` function generate sequence of repeated numbers or strings to create a vector\n\n```{r}\nid = rep(x = 3, each = 4)\nstation = rep(x = \"Station1\", each = 4)\nid;station\n```\n\nThe `rep()` function allows to parse `each` and `times` arguments. The `each` argument allows creation of vector that that repeat each element in a vector according to specified number. \n```{r}\nsampled.months = c(\"January\", \"March\", \"May\")\nrep(x = sampled.months, each = 3)\n\n```\n\nBut the `times` argument repeat the whole vector to specfied times\n```{r}\nrep(x = sampled.months, times = 3)\n```\n\n#### Generating vector of normal distribution\n\nThe central limit theorem that ensure the data is normal distributed is well known to statistician. R has a `rnorm()` function which makes vector of normal distributed values. For example to generate a vector of 40 sea surface temperature values from a normal distribution with a `mean` of 25, and `standard deviation` of 1.58, we simply type this expression in console;\n```{r}\nsst = rnorm(n = 40, mean = 25,sd = 1.58)\nsst\n```\n\n#### Rounding off numbers\nThere are many ways of rounding off numerical number to the nearest integers or specify the number of decimal places. the code block below illustrate the common way to round off:\n\n```{r}\nchl = rnorm(n = 20, mean = .55, sd = .2)\nchl |> round(digits = 2)\n```\n\n\n#### Number of elements in a vector\nSometimes you may have a long vector and want to know the numbers of elements in the object. R has `length()` function that allows you to query the vector and print the answer\n\n```{r}\nlength(chl)\n```\n\n\n### Data Frame\nThe basis for most data analyses in R are data frames -- spreadsheet-like tables.  data frame is the primary structures for storing data in R. Data frames are made up of rows and columns. The top row is a header and describes the contents of each variable. Each row represents an individual measured or observed record. Records can also have names. Each record contains multiple cells of values. The unique of data frame is the capability to different types of data - as youâ€™d expect, the different types of objects have different properties and can be used with different functions. Hereâ€™s the run-down of four common types:\n\n1. *matrix*: a table where all columns must contain objects of the same type (e.g. all numeric or all character). Uses less memory than other types and allows for much faster computations, but is difficult to use for certain types of data manipulation, plotting and analyses.\n\n1. *data.frame*: the most common type, where different columns can contain different types (e.g. one numeric column, one character column).\n1. *data.table*: an enhanced version of data.frame.\n1. *tibble*: another enhanced version of data.frame.\n\n\nLetâ€™s illustrates data frame using historical catch data in the Western Indian Ocean Region from FAO. This dataset  is called `landings_wio_country.csv` and contains some data about total landed catches of ten countries in the WIO region reported in FAO between 1951 and 2015.\n\n```{r}\n#| warning: false\n#| message: false\n#| echo: false\n\n\nreadr::read_csv(\"data/tidy/landings_wio_country.csv\", skip = 4) |> \n  dplyr::filter(year == 2015)|>\n  dplyr::select(country=name, year, catch) \n\n\n```\n\nNotice that  data frame follow the same structure: each column represents a variable (e.g. country, year, catch) and each row represents an record (e.g. an individual). This is the standard way to store data in R (as well as the standard format in statistics in general). In what follows, we will use the terms column and variable interchangeably, to describe the columns/variables in a data frame. That is imported data, but R allows us to create data frames and add attributes to data frames. Perhaps the easiest way to create a data frame is to parse vectors in a `data.frame()` function. For instance, in this case we create a simple data frame `dt` and assess its internal structure\n\n```{r}\n# create vectors\ncountry  = c('Kenya','Mozambique','Seychelles')\nweight = c(90, 75, 92)\nmaturity = c(\"I\", \"II\", \"V\")\n\n## use the vectors to make a data frame\ndt = data.frame(country, weight, maturity)\n\n## assess the internal structure\nstr(dt)\n```\n\nNote how Variable `Name` in dt was converted to a column of factors . This is because there is a default setting in `data.frame()` that converts character columns to factors . We can turn this off by setting the `stringsAsFactors = FALSE` argument:\n\n```{r}\n## use the vectors to make a data frame\ndf = data.frame(country, weight, maturity, stringsAsFactors = FALSE)\ndf |> str()\n```\n\nNow the variable `Name` is of character class in the data frame. The inherited problem of data frame to convert character columns into a factor is resolved by introduction f advanced data frames called *tibble* [@tibble], which provides sticker checking and better formating than the traditional data.frame.\n\n```{r}\n## use the vectors to make a tibble\ntb = tibble::tibble(country, weight, maturity) \n## check the internal structure of the tibble\ntb |> dplyr::glimpse()\n```\n\n@tbl-score show the the data frame created by fusing the two vectors together.\n\n```{r tab301, echo=FALSE}\n#| label: tbl-score\n#| tbl-cap: Variables in the data frame\n\ntb |>\n  gt::gt()\n\n```\n\nBecause the columns have meaning and we have given them column names, it is desirable to want to access an element by the name of the column as opposed to the column number.In large Excel spreadsheets I often get annoyed trying to remember which column something was. The `$`sign and `[]`are used in R to select variable from the data frame.\n\n```{r}\ndt$country\ndt[,1]\n```\n\n```{r}\ndt$weight\ndt[,2]\n```\n\nThe FSA package in R has build in dataset that we can use for illustration. For example, `ChinookArg` dataset  contains total length and weight of 112 Chinook salmon collected in three sites in Argentina.  (@tbl-chinook). \n\n```{r}\n#| label: tbl-chinook\n#| tbl-cap: Longleys' Economic dataset\n\nchinook = FSA::ChinookArg\n\n\n\nchinook |>\n  dplyr::sample_n(size = 12) |>\n  gt::gt()\n\n\n```\n\nSometimes you may need to create set of values and store them in vectors, then combine the vectors into a data frame. Let us see how this can be done. First create three vectors. One contains id for ten individuals, the second vector hold the time each individual signed in the attendane book and the third vector is the distance of each individual from office. We can concatenate the set of values to make vectors.\n\n```{r}\nvessel.id  = c(1,2,3,4,5,6,7,8,9,10)\n\ndeparture.time = lubridate::ymd_hms(c(\"2018-11-20 06:35:25 EAT\", \"2018-11-20 06:52:05 EAT\", \n                 \"2018-11-20 07:08:45 EAT\", \"2018-11-20 07:25:25 EAT\", \n                 \"2018-11-20 07:42:05 EAT\", \"2018-11-20 07:58:45 EAT\", \n                 \"2018-11-20 08:15:25 EAT\", \"2018-11-20 08:32:05 EAT\", \n                 \"2018-11-20 08:48:45 EAT\", \"2018-11-20 09:05:25 EAT\"), tz = \"\")\n\ndistance.ground = c(20, 85, 45, 69, 42,  52, 6, 45, 36, 7)\n```\n\nOnce we have the vectors that have the same length dimension, we can use the function `data.frame()` to combine the the three vectors into one data frame shown in @tbl-tab23\n\n```{r}\n\nfishing.dep = data.frame(vessel.id, \n                     departure.time, \n                     distance.ground)\n```\n\n```{r}\n#| echo: false\n#| label: tbl-tab23\n#| tbl-cap: The time fishers departed for fishing with the distance to th fishing ground\n\nfishing.dep |>\n  tidyr::separate(departure.time, into = c(\"date\", \"time\"), sep = \" \") |>\n  gt::gt()\n\n```\n\n## Importing Data\nSo far, weâ€™ve looked at several dataset in previous chapter and we have also created ourselves some datasets. While you can do all your data entry work in R or Excel, it is much more common to load data from other sources. Local and international organization have been collecting fisheries dependent and fisheries independent data for years. These historical dataset with fisheries information like fish catch, effort, landing sites, fishing ground and critical habitats can be obtained from several databases---some are open and other closed. Much of the data we download or receive from is either comma-separated value files `.csv` or and Excel spreadsheets, `.xlsx.` .csv files are spreadsheets stored as text files - basically Excel files stripped down to the bare minimum - no formatting, no formulas, no macros. You can open and edit them in spreadsheet software like LibreOffice Calc, Google Sheets or Microsoft Excel. Many devices and databases can export data in .csv format, making it a commonly used file format that you are likely to encounter sooner rather than later. \n\nWhether that be a comma separated (csv) or a tab delimited file, there are multiple functions that can read these data into R. We will stick to loading these data from the **tidyverse** packages but be aware these are not the only methods for doing this. We will use the tidyverse functions just to maintain consistency with everything else we do. The first package in **tidyverse** we will use is called **readr** [@readr], which is a collection of functions to load the tabular data from working directory in our machine into R session. Some of its functions include:\n\n+ `read_csv()`: comma separated (CSV) files\n+ `read_tsv()`: tab separated files\n+ `read_delim()`: general delimited files\n+ `read_fwf()`: fixed width files\n+ `read_table()`: tabular files where columns are separated by white-space.\n+ `read_log()`: web log files\n+ **readxl** reads in Excel files.\n\nBefore we import the data, we need to load the packages that we will use their functions in this chapter\n\n```{r}\n#| warning: false\n#| message: false\n\nrequire(tidyverse)\nrequire(magrittr)\n```\n\n\n### Importing csv files\n\nA `CSV` file is a type of file where each line contains a single record, and all the columns are separated from each other via a comma. In order to load data from a file into R, you need its path - that is, you need to tell R where to find the file. Unless you specify otherwise, R will look for files in its current working directory. You can read `.csv` file using `read_csv()` function of the **readr** package [@readr] as shown in the chunk below;\n\n\n\n```{r}\n#| eval: false\nimported.lfq = read_csv(\"dataset/project/tidy_LFQ_sample_4.csv\")\n\nlf4\n```\n\nWe imported `tidy_LFQ_sample_4.csv` from working directory into R using `read_csv()` and specify the path to the file in your working directory and store as `imported.lfq. If you get an error message, it means that `tidy_LFQ_sample_4.csv` is not in your working directory. Either move the file to the right directory (remember, you can use run `getwd()` to see what your working directory is) or change your working directory.\n\n```{r}\n#| warning: false\n#| message: false\n#| comment: \"\"\n#| \nimported.lfq = read_csv(\"data/tidy/tidy_LFQ_sample_4.csv\")\n\n\n```\nIf you glimpse the dataframe with `glimpse()` function, you should see the internal structure of the `imported.lfq` object we just loaded;\n\n```{r}\nimported.lfq %>% \n  glimpse()\n```\n\nThe dataset contains six variables and 6,185 records. The variables `site` and `sex` both contain text, and have been imported as character vectors4. The `date` column has been imported as date format, the variable `tl_mm` and `fl_mm` are measured length and have been imported as numeric vector measured in millimeters. The variable `wt_gm` is the weight of fish measured in grams and also have been imported as numeric vector. \n\n\nSo, what can you do in case you need to import data from a file that is not in your working directory? This is a common problem, as many of us store script files and data files in separate folders (or even on separate drives). One option is to use `file.choose`, which opens a pop-up window that lets you choose which file to open using a graphical interface:\n\n```r\nimported.lfq2 = read_csv(file.choose())\n```\n\nThis solution work just fine if you just want to open a single file once. But if you want to reuse your code or run it multiple times, you probably donâ€™t want to have to click and select your file each time. Instead, you can specify the path to your file in the call to `read_csv`.\n\n\n### Importing Excel files\n\nCommonly our data is stored as a Excel file. There are several packages that can be used to import Excel files to R. I prefer the **readxl** package [@readxl], so letâ€™s install that:\n\n```r\ninstall.packages(\"readxl\")\n```\nThe package has `read_exel()` function that allows us to specify which sheet within the Excel file to read. The  function automatically convert the worksheet into a `.csv` file and read it. Let's us import the the data in first sheet of the `tidy_LFQ_sample_4.xlsx`. Is a similar dataset that just imported in the previous section, but is in Excel format.  We will use this file to illustrate how to import the excel file into R workspace with `readxl` package [@readxl].\n\n\n```{r}\n#| warning: false\n#| message: false\n#| comment: \"\"\nimported.lfq = readxl::read_excel(\"data/tidy/tidy_LFQ_sample_4.xlsx\", sheet = 1)\n\n```\n\n\n\n```{r}\n#| warning: false\n#| message: false\n#| comment: \"\"\nimported.lfq\n\n```\n\n```{r}\nimported.lfq %>% \n  skimr::skim()\n```\n\n\n## Saving and exporting your data\nIn many a case, data manipulation is a huge part of statistical work, and of course you want to be able to save a data frame after manipulating it. There are two options for doing this in R - you can either export the data as e.g. a .csv or a .xlsx file, or save it in R format as an .RData file.\n\n### Exporting data\nJust as we used the functions `read_csv` and `read_excel` to import data, we can use `write_csv`to export it. The code below saves the bookstore data frame as a .csv file file, which will be created in the current working directory. If you wish to store \n\n\n```r\n\nimported.lfq %>%  write_csv(\"assets/fao_paul_dataset/tidy/tidy_lfq.csv\")\n\n```\n\n### Saving and loading R data\nBeing able to export to different spreadsheet formats is very useful, but sometimes you want to save an object that canâ€™t be saved in a spreadsheet format. For instance, you may wish to save a multiple processed data, functions and formula that youâ€™ve created. `.RData` files can be used to store one or more R objects. To save the objects bookstore and age in a `.Rdata` file, we can use the save function:\n\n\n\n```r\n\nsave.image(\"assets/fao_paul_dataset/tidy/myData.RData\")\n\n```\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":"","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["style.css"],"highlight-style":"ayu-mirage","output-file":"ch3Edition.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.319","bibliography":["references.bib"],"linkcolor":"blue","citecolor":"red","crossref":{"fig-title":"**FIGURE**","fig-labels":"arabic","tbl-title":"**TABLE**","tbl-labels":"arabic","title-delim":"**.**"},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"message":"","engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"show","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","css":["style.css"],"highlight-style":"ayu-mirage","output-file":"ch3Edition.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"linkcolor":"blue","citecolor":"red","crossref":{"fig-title":"**FIGURE**","fig-labels":"arabic","tbl-title":"**TABLE**","tbl-labels":"arabic","title-delim":"**.**"},"documentclass":"scrbook"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["html","pdf"]}